<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>嘿!楽</title>
  
  <subtitle>这里是楽的个人博客~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lesama.github.io/"/>
  <updated>2019-03-12T11:01:17.700Z</updated>
  <id>https://lesama.github.io/</id>
  
  <author>
    <name>楽</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习-逻辑回归推导</title>
    <link href="https://lesama.github.io/2019-03-12-ml-logisticRegression.html"/>
    <id>https://lesama.github.io/2019-03-12-ml-logisticRegression.html</id>
    <published>2019-03-12T10:38:17.000Z</published>
    <updated>2019-03-12T11:01:17.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h1><h2 id="逻辑回归的概念"><a href="#逻辑回归的概念" class="headerlink" title="逻辑回归的概念"></a>逻辑回归的概念</h2><p><strong>Logistic Regression</strong> 在《机器学习》-周志华一书中又叫<strong>对数几率回归</strong>。逻辑回归和多重线性回归实际上有很多的相同之处，除了它们的因变量（函数）不同外，其他的基本差不多，所以逻辑回归和线性回归又统属于<strong>广义线性模型</strong>（generalizedlinear  model）。</p><p>广义线性模型的形式其实都差不多，不同的就是因变量（函数）的不同。</p><ul><li>如果是<strong>连续</strong>的，就是<strong>多重线性回归</strong></li><li>如果是<strong>二项分布</strong>，就是<strong>Logistic回归</strong></li><li>如果是<strong>Poisson分布</strong>，就是<strong>Poisson分布</strong></li><li>如果是<strong>负二项分布</strong>，就是<strong>负二项回归</strong></li></ul><p>Logistic回归的因变量可以是二分类的，也可以是多分类的，但是二分类的更为常用，也更加容易解释。所以实际中最常用的就是二分类的Logistic回归。 </p><h2 id="线性回归-Logistic回归"><a href="#线性回归-Logistic回归" class="headerlink" title="线性回归-Logistic回归"></a>线性回归-Logistic回归</h2><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/2019-03-12-ml-logisticRegression/7.png" alt="image"></p><h2 id="Logistic回归的主要用途："><a href="#Logistic回归的主要用途：" class="headerlink" title="Logistic回归的主要用途："></a>Logistic回归的<strong>主要用途</strong>：</h2><ul><li>寻找危险因素：寻找某一疾病的危险因素等；</li><li>预测：根据模型，预测在不同的自变量情况下，发生某病或某种情况的概率有多大；</li><li>判别：实际上跟预测有些类似，也是根据模型，判断某人属于某病或属于某种情况的概率有多大，也就是看一下这个人有多大的可能性是属于某病。</li></ul><p>Logistic回归主要在<strong>流行病学</strong>中应用较多，比较常用的情形是探索某疾病的危险因素，根据危险因素预测某疾病发生的概率，等等。例如，想探讨胃癌发生的危险因素，可以选择两组人群，一组是胃癌组，一组是非胃癌组，两组人群肯定有不同的体征和生活方式等。这里的因变量就是是否胃癌，即“是”或“否”，自变量就可以包括很多了，例如年龄、性别、饮食习惯、幽门螺杆菌感染等。自变量既可以是连续的，也可以是分类的。 </p><h2 id="常规步骤"><a href="#常规步骤" class="headerlink" title="常规步骤"></a><strong>常规步骤</strong></h2><p>Regression问题的常规步骤为：</p><ol><li>寻找<strong>h</strong>函数（即hypothesis）；</li><li>构造<strong>J</strong>函数（损失函数）；</li><li>想办法使得J<strong>函数最小</strong>并求得回归参数（θ）</li></ol><h2 id="构造预测函数（hypothesis）"><a href="#构造预测函数（hypothesis）" class="headerlink" title="构造预测函数（hypothesis）"></a>构造预测函数（hypothesis）</h2><p>Logistic回归虽然名字里带“回归”，但是它实际上是一种分类方法，主要用于两分类问题（即输出只有两种，分别代表两个类别），所以利用了Logistic函数（或称为<strong>Sigmoid函数</strong>），函数形式为：</p><script type="math/tex; mode=display">g(z)=\frac{1}{1+e^{-z}}​</script><p>为了方便后面使用我们求出$g(z)​$的导数：</p><script type="math/tex; mode=display">g^{'}(z)=\frac1{1-e^{-x} } \cdot (1- \frac1{1-e^{-x} })=g(z)(1-g(z))</script><p>Sigmoid 函数在有个很漂亮的“S”形，如下图所示 </p><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/2019-03-12-ml-logisticRegression/6.png" alt="image"></p><h2 id="构建预测函数"><a href="#构建预测函数" class="headerlink" title="构建预测函数"></a>构建预测函数</h2><p><strong>决策边界</strong>又分为<strong>线性的决策边界</strong>和<strong>非线性的决策边界</strong></p><p>线性的决策边界：</p><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/2019-03-12-ml-logisticRegression/8.png" alt="1"></p><p>非线性的决策边界：</p><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/2019-03-12-ml-logisticRegression/9.png" alt="2"></p><p>对于线性边界的情况，边界形式如下：</p><script type="math/tex; mode=display">\theta_0+\theta_1x_1+\cdot \cdot \cdot + \theta_nx_n=\sum_{i=1}^n \theta_ix_i = \theta^Tx</script><p>构建的预测函数为：</p><script type="math/tex; mode=display">h_\theta(x)=g(\theta^Tx)=\frac1{1+e^{-\theta^Tx}}​</script><h2 id="构建损失函数"><a href="#构建损失函数" class="headerlink" title="构建损失函数"></a>构建损失函数</h2><p>由于是二项分布，函数<strong>$h_ \theta(x)$</strong>的值就有特殊的含义，它所表示的是结果取1的概率，因此对于输入x的分类结果就判别为类别1和类别0的概率分别为：</p><script type="math/tex; mode=display">P(y=1|x;\theta)=h_\theta(x) \\\ P(y=0|x;\theta)=1-h_\theta(x)</script><p>所以：</p><script type="math/tex; mode=display">P(y|x;\theta) = {h_\theta(x) }^y{(1-h_\theta(x)) }^{1-y}</script><h2 id="构建似然函数"><a href="#构建似然函数" class="headerlink" title="构建似然函数"></a>构建似然函数</h2><script type="math/tex; mode=display">L(\theta)=\prod_{i=1}^n P(y_i|x_i;\theta) =\prod_{i=1}^n {h_\theta(x_i) }^{y_i}{(1-h_\theta(x_i)) }^{1-y_i}</script><h2 id="对数似然函数"><a href="#对数似然函数" class="headerlink" title="对数似然函数"></a>对数似然函数</h2><script type="math/tex; mode=display">l(\theta)=logL(\theta)=\sum_{i=1}^n(y_ilogh_\theta(x_i)+(1-y_i)log(1-h_\theta(x_i)))​</script><p>最大似然估计就是求使<strong>$l(\theta)​$</strong>取最大值时的θ，其实这里可以使用梯度上升法求解，求得的θ就是要求的最佳参数。</p><h2 id="梯度下降法求的最小值"><a href="#梯度下降法求的最小值" class="headerlink" title="梯度下降法求的最小值"></a><strong>梯度下降法求的最小值</strong></h2><h3 id="θ更新过程："><a href="#θ更新过程：" class="headerlink" title="θ更新过程："></a>θ更新过程：</h3><script type="math/tex; mode=display">\theta_j :=\theta_j-a(\frac{\partial l(\theta)}{\partial \theta_j})</script><h3 id="对-theta-求偏导"><a href="#对-theta-求偏导" class="headerlink" title="对$\theta$求偏导"></a>对$\theta$求偏导</h3><p>$\frac{\partial l(\theta)}{\partial \theta_j}=\frac{\partial g(\theta^Tx)}{\partial \theta_j}(\frac{y}{g(\theta^Tx)}-\frac{1-y}{g(\theta^Tx)})​$</p><p>$=g(\theta^Tx)(1-g(\theta^Tx)) \frac{\partial\theta^Tx}{\partial \theta_j}(\frac{y}{g(\theta^Tx)}-\frac{1-y}{g(\theta^Tx)})​$</p><p>$=(y(1-g(\theta^Tx))-(1-y)g(\theta^Tx))x_j$ </p><p>$=(y-h_\theta(x))x_j​$ </p><h3 id="θ更新过程就可以写为："><a href="#θ更新过程就可以写为：" class="headerlink" title="θ更新过程就可以写为："></a>θ更新过程就可以写为：</h3><p>$\theta_j :=\theta_j-a\sum_{i=1}^n (y_i-h_\theta(x_i))x_i^j$</p><h3 id="但是在在Andrew-Ng的课程中将-J-theta-取为下式，即："><a href="#但是在在Andrew-Ng的课程中将-J-theta-取为下式，即：" class="headerlink" title="但是在在Andrew Ng的课程中将 $J(\theta)$取为下式，即："></a>但是在在Andrew Ng的课程中将 $J(\theta)$取为下式，即：</h3><p>$J(\theta)=-\frac{1}{m}l(\theta)$</p><p><strong>因为乘了一个负的系数-1/m，所以取 $J(\theta)​$最小值时的θ为要求的最佳参数。</strong> </p><p>$\frac{\partial l(\theta)}{\partial \theta_j}=\frac 1 m \sum_{i=1}^n(h_\theta(x_i)-y_i)x_i^j$</p><p><strong>相应的$\theta​$:</strong></p><p>$\theta_j :=\theta_j-a \frac 1 m \sum_{i=1}^n (h_\theta(x_i)-y_i)x_i^j$</p><h2 id="向量化（Vectorization-）"><a href="#向量化（Vectorization-）" class="headerlink" title="向量化（Vectorization ）"></a>向量化（<strong>Vectorization</strong> ）</h2><p>Vectorization是使用矩阵计算来代替for循环，以简化计算过程，提高效率。</p><p>如上式，Σ(…)是一个求和的过程，显然需要一个for语句循环m次，所以根本没有完全的实现vectorization。</p><h3 id="下面介绍向量化的过程："><a href="#下面介绍向量化的过程：" class="headerlink" title="下面介绍向量化的过程："></a>下面介绍向量化的过程：</h3><p>约定训练数据的矩阵形式如下，x的每一行为一条训练样本，而每一列为不同的特称取值：</p><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/2019-03-12-ml-logisticRegression/10.png" alt="image"></p><p><strong>g(A)的参数A为一列向量，所以实现g函数时要支持列向量作为参数，并返回列向量。由上式可知 $h_\theta(x)-y$可以由$g(A)-y$一次求得</strong></p><h3 id="θ更新过程可以改为"><a href="#θ更新过程可以改为" class="headerlink" title="θ更新过程可以改为"></a>θ更新过程可以改为</h3><p>$\theta_j :=\theta_j-a \frac 1 m \sum_{i=1}^n (h_\theta(x_i)-y_i)x_i^j=\theta_j-a \frac 1 m \sum_{i=1}^n e_ix_i^j=\theta_j-a \frac1 m x^TE$</p><h3 id="综上所述，Vectorization后θ更新的步骤如下："><a href="#综上所述，Vectorization后θ更新的步骤如下：" class="headerlink" title="综上所述，Vectorization后θ更新的步骤如下："></a>综上所述，Vectorization后θ更新的步骤如下：</h3><hr><ol><li><p>求:$A=x \cdot \theta$</p></li><li><p>求$E=g(A)-y​$</p></li><li><p>求$\theta:=\theta-ax^TE$</p></li></ol><hr><h2 id="正则化Regularization"><a href="#正则化Regularization" class="headerlink" title="正则化Regularization"></a><strong>正则化Regularization</strong></h2><p>同样逻辑回归也有<strong>欠拟合、适合拟合、过拟合问题</strong></p><p>对于线性回归或逻辑回归的损失函数构成的模型，可能会有些权重很大，有些权重很小，导致过拟合（就是过分拟合了训练数据），使得模型的复杂度提高，泛化能力较差（对未知数据的预测能力）。</p><p>下面左图即为欠拟合，中图为合适的拟合，右图为过拟合。</p><p>​             <img src="/images/ml/11.png" alt="image"></p><p>过拟合问题往往源自过多的特征。</p><h3 id="过拟合问题解决方法"><a href="#过拟合问题解决方法" class="headerlink" title="过拟合问题解决方法"></a><strong>过拟合问题解决方法</strong></h3><p>1）减少特征数量（减少特征会失去一些信息，即使特征选的很好）</p><ul><li>可用人工选择要保留的特征；</li><li>模型选择算法；</li></ul><p>2）正则化（特征较多时比较有效）</p><ul><li>保留所有特征，但减少θ的大小</li></ul><h3 id="正则化方法"><a href="#正则化方法" class="headerlink" title="正则化方法"></a><strong>正则化方法</strong></h3><p>正则化是结构风险最小化策略的实现，是在经验风险上加一个正则化项或惩罚项。正则化项一般是模型复杂度的单调递增函数，模型越复杂，正则化项就越大。</p><p>在<a href="https://sevenold.github.io/2018/07/ml-linearRegressionL1L2/" target="_blank" rel="noopener">线性回归算法的正则化问题</a>,正则项可以取不同的形式，在回归问题中取平方损失，就是参数的L2范数，也可以取L1范数。取平方损失时，模型的损失函数变为： </p><script type="math/tex; mode=display">J(\theta)=\frac1{2m}\sum_{i=1}^{n}(h_\theta(x_i)-y_i)^2+\lambda\sum_{j=1}^n \theta_j^2</script><h3 id="lambda是正则项系数："><a href="#lambda是正则项系数：" class="headerlink" title="lambda是正则项系数："></a>lambda是正则项系数：</h3><ul><li>如果它的值很大，说明对模型的复杂度惩罚大，对拟合数据的损失惩罚小，这样它就不会过分拟合数据，在训练数据上的偏差较大，在未知数据上的方差较小，但是可能出现欠拟合的现象；</li><li>如果它的值很小，说明比较注重对训练数据的拟合，在训练数据上的偏差会小，但是可能会导致过拟合。</li></ul><h3 id="正则化后的梯度下降算法θ的更新变为："><a href="#正则化后的梯度下降算法θ的更新变为：" class="headerlink" title="正则化后的梯度下降算法θ的更新变为："></a>正则化后的梯度下降算法θ的更新变为：</h3><script type="math/tex; mode=display">\theta_j :=\theta_j-a \frac 1 m \sum_{i=1}^n (h_\theta(x_i)-y_i)x_i^j - \frac \lambda m \theta_j</script><h2 id="其他优化算法"><a href="#其他优化算法" class="headerlink" title="其他优化算法"></a><strong>其他优化算法</strong></h2><ul><li>Conjugate gradient method(共轭梯度法)</li><li>Quasi-Newton method(拟牛顿法)</li><li>BFGS method(局部优化法)</li><li>L-BFGS(Limited-memory BFGS)（有限内存局部优化法）</li></ul><p>后二者由拟牛顿法引申出来，与梯度下降算法相比，这些算法的优点是：</p><ul><li>第一，不需要手动的选择步长；</li><li>第二，通常比梯度下降算法快；</li></ul><p>但是缺点是更复杂。</p><h2 id="多类分类问题"><a href="#多类分类问题" class="headerlink" title="多类分类问题"></a>多类分类问题</h2><p>多类分类问题中,我们的训练集中有多个类(&gt;2),我们无法仅仅用一个二元变量(0或1)来做判断依据。例如我们要预测天气情况分四种类型:晴天、多云、下雨或下雪。下面是一个多类分类问题可能的情况: </p><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/2019-03-12-ml-logisticRegression/12.png" alt="image"></p><p>一种解决这类问题的途径是采用一对多(One-vs-All)方法（可以将其看做成二类分类问题：保留其中的一类，剩下的作为另一类 ）。在一对多方法中,我们将多类分类问题转化成二元分类问题。为了能实现这样的转变,我们将多个类中的一个类标记为正向类(y=1),然后将其他所有类都标记为负向类,这个模型记作：</p><script type="math/tex; mode=display">h_\theta^{(1)}(x)</script><p>接着,类似地第我们选择另一个类标记为正向类(y=2),再将其它类都标记为负向类,将这个模型记作,</p><script type="math/tex; mode=display">h_\theta^{(2)}(x)</script><p>依此类推。最后我们得到一系列的模型简记为: </p><script type="math/tex; mode=display">h_\theta^{(i)}(x)=p(y=i|x;\theta)​</script><p>其中 i = 1,2,3,…,k步骤可以记作下图： </p><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/2019-03-12-ml-logisticRegression/13.png" alt="image"></p><p>最后,在我们需要做预测时,我们将所有的分类机都运行一遍,然后对每一个输入变量,都选择最高可能性的输出变量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;逻辑回归&quot;&gt;&lt;a href=&quot;#逻辑回归&quot; class=&quot;headerlink&quot; title=&quot;逻辑回归&quot;&gt;&lt;/a&gt;逻辑回归&lt;/h1&gt;&lt;h2 id=&quot;逻辑回归的概念&quot;&gt;&lt;a href=&quot;#逻辑回归的概念&quot; class=&quot;headerlink&quot; title=&quot;逻辑回
      
    
    </summary>
    
      <category term="人工智能" scheme="https://lesama.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="机器学习" scheme="https://lesama.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://lesama.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="https://lesama.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-决策树和随机森林</title>
    <link href="https://lesama.github.io/2019-03-11-ml-DecisionTree.html"/>
    <id>https://lesama.github.io/2019-03-11-ml-DecisionTree.html</id>
    <published>2019-03-11T10:39:02.000Z</published>
    <updated>2019-03-12T10:41:23.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><h2 id="决策树定义"><a href="#决策树定义" class="headerlink" title="决策树定义"></a>决策树定义</h2><p><strong>决策树（decision tree）</strong>是一种<strong>分类</strong>与<strong>回归</strong>方法，本文主要讨论用于<strong>分类</strong>的决策树，决策树的结构呈<strong>树形</strong>结构，在分类问题中，其代表基于特征对数据进行分类的过程，通常可以认为是if-then规则的集合，也可以认为是定义在<strong>特征空间与类空间上的条件概率分布</strong>。其主要优点是模型可读性好并且分类速度快。训练的时候，利用训练数据根据损失函数最小化的原则建立决策树模型。</p><p>预测时对于新的数据，利用决策树进行分类。决策树的学习通常包括三个步骤：<strong>特征选择，生成决策树，对决策树进行剪枝</strong>。这些决策树的思想主要来自Quinlan在1986年提出的ID3算法和1993年提出的C4.5算法，以及Breiman等人在1984年提出的CART算法。 </p><p>用于分类的决策树是一种对数据进行分类的树形结构。决策树主要由节点（node）和有向边（directed edge）组成。节点有两种类型：内部节点（internal node）以及叶节点（leaf node）。内部节点表示一个特征或者属性，叶节点表示一个类。其结构如图所示：  </p><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/2019-03-11-ml-DecisionTree/14.png" alt="image"></p><p>决策树学习采用的是<strong>自顶向下</strong>的递归方法, 其基本思想是以<strong>信息熵</strong>为度量构造一棵<strong>熵值 下降最快</strong>的树,到叶子节点处的熵值为零, 此时每个叶节点中的实例都属于同一类。</p><ul><li>最大优点: 可以自学习。在学习的过程中,不需要使用者了解过多背景知识,只需要对训练实例进行较好的标注,就能够进行学习。</li><li>显然,属于<strong>有监督学习</strong>。</li></ul><h2 id="决策树三种生成算法"><a href="#决策树三种生成算法" class="headerlink" title="决策树三种生成算法"></a>决策树三种生成算法</h2><ol><li><h3 id="ID3-—-信息增益-最大的准则"><a href="#ID3-—-信息增益-最大的准则" class="headerlink" title="ID3 —- 信息增益 最大的准则"></a>ID3 —- <strong>信息增益</strong> <strong>最大</strong>的准则</h3><p>​    ID3算法的核心是在决策树各个节点上使用<strong>信息增益</strong>作为特征选择的依据，递归的构建决策树。  从根节点开始，对节点计算所有可能的特征的信息增益，选择信息增益最大的特征作为节点的特征，由该特征的不同取值建立子节点；再对子节点递归的调用以上方法，构建决策树；知道所有特征的信息增益均很小或没有特征可以选择为止，得到最后一个决策树。ID3相当于用最大似然法进行概率模型的选择。 </p></li><li><h3 id="C4-5-—-信息增益比-最大的准则"><a href="#C4-5-—-信息增益比-最大的准则" class="headerlink" title="C4.5 —- 信息增益比 最大的准则"></a>C4.5 —- <strong>信息增益比</strong> 最大的准则</h3><p>​    C4.5算法使用<strong>信息增益率</strong>作为特征选择的依据，算法的流程与ID3相似。 </p></li><li><h3 id="CART"><a href="#CART" class="headerlink" title="CART"></a>CART</h3><ul><li>回归树: <strong>平方误差</strong> <strong>最小</strong> 的准则</li><li>分类树: <strong>基尼系数</strong> <strong>最小</strong>的准则</li></ul><p>CART树的名字其实非常有意思，Classification And Regression Tree（分类回归树），它使用基尼系数(Gini Index)作为特征的划分依据。顾名思义，CART既可以用来做分类也可以用来做回归。它是在给定输入随机变量X条件下输出随机变量Y的条件概率分布的学习方法。  CART树假设我么的决策树是二叉树，内部节点特征的取值为是或否。</p><p><strong>CART算法</strong>为：  </p><pre><code> 1. 决策树的生成：基于训练数据集生成决策树，生成的决策树要尽量大； 2.决策树剪枝：用验证数据集对已经生成的巨额额数进行剪枝并选择最优子树。 </code></pre></li></ol><h2 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a>信息熵</h2><p><strong>信息熵（information entropy）</strong> 是度量样本集合纯度的最常用的一种指标。</p><ul><li><p><strong>熵：$H(X)=-\sum_{x \in X} p(x,y)logp(x)$</strong></p></li><li><p><strong>联合熵：$H(X，Y)=-\sum_{x \in X,y \in Y} p(x,y)logp(x,y)$</strong></p></li><li><p><strong>条件熵：$H(X|Y)=-\sum_{x \in X,y \in Y} p(x,y)logp(x|y)$</strong></p></li><li><p><strong>相对熵：$D(p||q)=\sum_x p(x)log\frac{p(x)}{q(x)}$</strong></p></li><li><p><strong>互信息：$I(x,y)=\sum_{x\in X, y \in Y} p(x,y )log\frac{p(x,y)}{p(x)p(y)}$</strong></p></li></ul><h2 id="决策树学习基本算法"><a href="#决策树学习基本算法" class="headerlink" title="决策树学习基本算法"></a>决策树学习基本算法</h2><ul><li><strong>输入</strong>：训练集$D={(x_1,y_1),(x_2,y_2),…,(x_m,y_m)}$;<br>  属性值$A={a_1,a_2,…,a_d}$</li><li><strong>过程</strong>：函数$TreeGenerate(D,A)$</li></ul><ol><li>生成结点$node$；</li><li>$if$  $D$中样本全属于同一类别$C$ $then$</li><li>​    将$node​$标记为C类结点； $return​$</li><li>$end$ $if$</li><li>$if$ $A=$$\varnothing$ $OR$ $D$ 中样本在$A$上取值相同 $then$</li><li>​    将$node$标记为叶节点，其类别标记为$D$中样本数最多的类；$return$</li><li>$end if$</li><li>从$A$中选择最优划分属性$a_*$；</li><li>$for$ $a_<em>$的每一个值$a^v_</em>$ $do$</li><li>​    为$node$生成一个分支；令$D_v$表示$D$中在$a_<em>$上取值为$a^v_</em>$的样本子集；</li><li>​    if $D_v$为空 $then$</li><li>​        将分支结点标记为叶节点，其类别标记为D中样本最多的类；$return$</li><li>​    $else$</li><li>​        以$TreeGenerate$（$D_v$,A\\{$a_*$}）​为分支结点</li><li>​    $end$ $if​$</li><li>$end​$ $for​$</li></ol><ul><li><strong>输出</strong>：以$node$为根结点的一颗决策树</li></ul><h2 id="信息增益—-g-D-A"><a href="#信息增益—-g-D-A" class="headerlink" title="信息增益—-$g(D,A)$"></a>信息增益—-$g(D,A)$</h2><p><strong>信息增益(Information Gain)</strong>：表示得知特征A的信息而使得类X的信息的不确定性减少的程度。<br>定义：特征A对训练数据集D的<strong>信息增益</strong>g(D, A)，定义为集合D的<strong>经验熵</strong>H(D)与<strong>经验条件熵</strong>H(D|A)的差值。 </p><script type="math/tex; mode=display">g(D,A)=H(D)−H(D|A)​</script><p>而这又是互信息的定义。所以<strong>决策树中的信息增益等价于训练集中类与特征的互信息。</strong></p><p><em>总结</em>：一般而言，<strong>信息增益</strong>g(D, A)越大，就意味着使用特征A来进行划分所获得的“纯度提升”就越大。著名的ID3决策树学习算法就是以信息增益为准则来学习划分属性的。</p><h2 id="增益率"><a href="#增益率" class="headerlink" title="增益率"></a>增益率</h2><p><strong>信息率(Information Gain Ratio)</strong>：  用信息增益作为划分特征的依据时，会存在一些问题。例如，如果使用数据的ID作为特征，这样，每个数据点相当于均匀分布，所以得到的信息增益一定是最大的，但是我们都知道ID是不能作为特征的。这样如果单纯的使用信息增益作为划分特征的依据的话，会导致我们生成的树比较矮胖，容易<strong>过拟合</strong>。 </p><p>定义：特征A对训练数据集D的<strong>信息增益率</strong><script type="math/tex">gR(D,A)​</script>定义为其<strong>信息增益</strong><script type="math/tex">g(D,A)​</script>与训练数据集D关于特征A的值得<strong>信息熵</strong><script type="math/tex">IV(D)​</script>之比：</p><script type="math/tex; mode=display"> gR(D,A)=\frac {g(D,A)}{IV(D)}</script><p><strong>总结：信息增益准则对可取值数目较多的属性有所偏好，为减少这种偏好可能带来的不利影响，著名的C4.5决策树算法就不直接使用信息增益而是使用“增益率” 。</strong></p><h2 id="Gini系数："><a href="#Gini系数：" class="headerlink" title="Gini系数："></a>Gini系数：</h2><p><strong>数据集P的纯度可以用Gini值来度量。</strong></p><script type="math/tex; mode=display">Gini(P)=\sum_{k=1}^K p_k(1-p_k)=1-\sum_{k=1}^Kp_k^2</script><p><strong>总结：CART决策树使用Gini指数来选择划分属性。$Gini(P)$反映了从数据集D中随机抽取了两个样本，其类别标记不一致的概率，因此，$Gini（D）$越小，则数据集P的纯度就越高。</strong></p><h2 id="决策树的评价-——-loss-function："><a href="#决策树的评价-——-loss-function：" class="headerlink" title="决策树的评价 —— loss function："></a>决策树的评价 —— loss function：</h2><p>  假定样本的总类别数为$K$个；树T的叶节点个数为$\mid T \mid$，t是树T的叶节点，叶节点有$N_t$个样本点，其中$k$类的样本点有$N_{ik}$个，$H_t(T)$为叶节点t上的<strong>经验熵</strong>，则决策树的loss function可以定义为：  </p><script type="math/tex; mode=display">C_a(T)=\sum_{t\in Leaf}N_tH_t(T)+a|T|​</script><h2 id="决策树种避免过拟合的方法———剪枝"><a href="#决策树种避免过拟合的方法———剪枝" class="headerlink" title="决策树种避免过拟合的方法———剪枝"></a>决策树种避免过拟合的方法———剪枝</h2><ul><li><strong>预剪枝</strong>：在决策树生成过程中，对每个结点在划分前先进行估计，如果当前的结点划分不能带来决策树泛化性能提升，则停止划分并将当前的结点标记为叶节点。</li><li><strong>后剪枝</strong>：先从训练集生成一个完整的决策树，然后自底向上的对非叶节点进行考察，若将该结点对应的子树替换为叶节点能带来决策树泛化能力性能提升，则就把该子树替换为叶结点。</li></ul><h3 id="决策树的评价指标"><a href="#决策树的评价指标" class="headerlink" title="决策树的评价指标"></a>决策树的评价指标</h3><p><strong>在上面的决策树的评价指标loss function ：$C_a(T)=\sum_{t\in Leaf}N_tH_t(T)+a|T|$中，</strong></p><ul><li><p>C(T)表示模型对训练数据集的预测误差，即模型与训练数据的拟合程度，</p></li><li><p>$\mid T \mid​$表示模型复杂度，由参数α控制两者之间的影响。 </p></li></ul><h4 id="当α确定时："><a href="#当α确定时：" class="headerlink" title="当α确定时："></a>当α确定时：</h4><ul><li>子树越大，与训练集的拟合越好，但模型的复杂度就越高；</li><li>子树越小，模型简单，但与训练集的拟合度不好。</li></ul><h3 id="决策树生成学习局部的模型，而剪枝学习整体的模型"><a href="#决策树生成学习局部的模型，而剪枝学习整体的模型" class="headerlink" title="决策树生成学习局部的模型，而剪枝学习整体的模型!"></a>决策树生成学习局部的模型，而剪枝学习整体的模型!</h3><h4 id="剪枝的过程为："><a href="#剪枝的过程为：" class="headerlink" title="剪枝的过程为："></a>剪枝的过程为：</h4><ul><li>计算每个节点的经验熵；</li><li>递归的从树的叶节点向上回缩，设一组叶节点回缩到其父节点之前和之后的整体树分别为$T_B$和$T_A$，对应的损失函数值分别为$C_α(T_B)$和$C_α(T_A),$如果$C_α(T_A)&lt;=C_α(T_B)$，则进行剪枝。</li></ul><h2 id="决策树的优缺点"><a href="#决策树的优缺点" class="headerlink" title="决策树的优缺点"></a>决策树的优缺点</h2><ul><li>优点: 决策树对训练属于有很好的分类能力</li><li>缺点: 但对未知的测试数据未必有好的分类能力,泛化 能力弱,即可能发生过拟合现象。 </li></ul><h2 id="Bagging（套袋法）"><a href="#Bagging（套袋法）" class="headerlink" title="Bagging（套袋法）"></a>Bagging（套袋法）</h2><p>bagging的算法过程如下：</p><ol><li>从原始样本集中使用Bootstraping方法随机抽取n个训练样本，共进行k轮抽取，得到k个训练集。（k个训练集之间相互独立，元素可以有重复）</li><li>对于k个训练集，我们训练k个模型（这k个模型可以根据具体问题而定，比如决策树，knn等）</li><li>对于分类问题：由投票表决产生分类结果；对于回归问题：由k个模型预测结果的均值作为最后预测结果。（所有模型的重要性相同）</li></ol><h2 id="Boosting（提升法）"><a href="#Boosting（提升法）" class="headerlink" title="Boosting（提升法）"></a>Boosting（提升法）</h2><p>boosting的算法过程如下：</p><ol><li>对于训练集中的每个样本建立权值wi，表示对每个样本的关注度。当某个样本被误分类的概率很高时，需要加大对该样本的权值。</li><li>进行迭代的过程中，每一步迭代都是一个弱分类器。我们需要用某种策略将其组合，作为最终模型。（例如AdaBoost给每个弱分类器一个权值，将其线性组合最为最终分类器。误差越小的弱分类器，权值越大）</li></ol><h2 id="Bagging，Boosting的主要区别"><a href="#Bagging，Boosting的主要区别" class="headerlink" title="Bagging，Boosting的主要区别"></a>Bagging，Boosting的主要区别</h2><ol><li><p>样本选择上：</p><p>Bagging采用的是Bootstrap随机有放回抽样；</p><p>Boosting每一轮的训练集是不变的，改变的只是每一个样本的权重。</p></li><li><p>样本权重：</p><p>Bagging使用的是均匀取样，每个样本权重相等；</p><p>Boosting根据错误率调整样本权重，错误率越大的样本权重越大。</p></li><li><p>预测函数：</p><p>Bagging所有的预测函数的权重相等；</p><p>Boosting中误差越小的预测函数其权重越大。</p></li><li><p>并行计算：</p><p>Bagging各个预测函数可以并行生成；</p><p>Boosting各个预测函数必须按顺序迭代生成。</p></li></ol><h2 id="决策树与这些算法框架进行结合所得到的新的算法："><a href="#决策树与这些算法框架进行结合所得到的新的算法：" class="headerlink" title="决策树与这些算法框架进行结合所得到的新的算法："></a>决策树与这些算法框架进行结合所得到的新的算法：</h2><p>1）Bagging + 决策树 = 随机森林</p><p>2）AdaBoost + 决策树 = 提升树</p><p>3）Gradient Boosting + 决策树 = GBDT</p><h1 id="随机森林（Random-Forests）"><a href="#随机森林（Random-Forests）" class="headerlink" title="随机森林（Random Forests）"></a>随机森林（Random Forests）</h1><p>随机森林是一种重要的基于Bagging的集成学习方法，可以用来做分类、回归等问题。</p><h2 id="随机森林的优点："><a href="#随机森林的优点：" class="headerlink" title="随机森林的优点："></a>随机森林的优点：</h2><ul><li>具有极高的准确率</li><li>随机性的引入，使得随机森林不容易过拟合</li><li>随机性的引入，使得随机森林有很好的抗噪声能力</li><li>能处理很高维度的数据，并且不用做特征选择</li><li>既能处理离散型数据，也能处理连续型数据，数据集无需规范化</li><li>训练速度快，可以得到变量重要性排序</li><li>容易实现并行化</li></ul><h2 id="随机森林的缺点："><a href="#随机森林的缺点：" class="headerlink" title="随机森林的缺点："></a>随机森林的缺点：</h2><ul><li>当随机森林中的决策树个数很多时，训练时需要的空间和时间会较大</li><li>随机森林模型还有许多不好解释的地方，有点算个黑盒模型</li></ul><h2 id="随机森林的构建过程"><a href="#随机森林的构建过程" class="headerlink" title="随机森林的构建过程"></a>随机森林的构建过程</h2><p>与上面介绍的Bagging过程相似，<strong>随机森林的构建过程大致如下</strong>：</p><ol><li>从原始训练集中使用Bootstraping方法随机有放回采样选出m个样本，共进行n_tree次采样，生成n_tree个训练集</li><li>对于n_tree个训练集，我们分别训练n_tree个决策树模型</li><li>对于单个决策树模型，假设训练样本特征的个数为n，那么每次分裂时根据信息增益/信息增益比/基尼指数选择最好的特征进行分裂</li><li>每棵树都一直这样分裂下去，直到该节点的所有训练样例都属于同一类。在决策树的分裂过程中不需要剪枝</li><li>将生成的多棵决策树组成随机森林。对于分类问题，按多棵树分类器投票决定最终分类结果；对于回归问题，由多棵树预测值的均值决定最终预测结果</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;决策树&quot;&gt;&lt;a href=&quot;#决策树&quot; class=&quot;headerlink&quot; title=&quot;决策树&quot;&gt;&lt;/a&gt;决策树&lt;/h1&gt;&lt;h2 id=&quot;决策树定义&quot;&gt;&lt;a href=&quot;#决策树定义&quot; class=&quot;headerlink&quot; title=&quot;决策树定义&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="人工智能" scheme="https://lesama.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="机器学习" scheme="https://lesama.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://lesama.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="https://lesama.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-线性回归算法python实现</title>
    <link href="https://lesama.github.io/2019-03-10-ml-linearRegression-python.html"/>
    <id>https://lesama.github.io/2019-03-10-ml-linearRegression-python.html</id>
    <published>2019-03-10T03:13:02.000Z</published>
    <updated>2019-03-12T10:41:28.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性回归算法python实现"><a href="#线性回归算法python实现" class="headerlink" title="线性回归算法python实现"></a>线性回归算法python实现</h1><h2 id="导入所需要的库文件"><a href="#导入所需要的库文件" class="headerlink" title="导入所需要的库文件"></a>导入所需要的库文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment"># 导入可视化库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np               <span class="comment"># 导入数据处理库</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets     <span class="comment"># 导入sklearn自带的数据集</span></span><br></pre></td></tr></table></figure><h2 id="把我们的参数值求解公式转换为代码"><a href="#把我们的参数值求解公式转换为代码" class="headerlink" title="把我们的参数值求解公式转换为代码"></a>把我们的参数值求解公式转换为代码</h2><p>求解的公式： $\theta=(X^TX)^{-1}X^TY$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X, y)</span>:</span>                    <span class="comment"># 训练集的拟合</span></span><br><span class="line">        X = np.insert(X, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)  <span class="comment"># 增加一个维度</span></span><br><span class="line">        <span class="keyword">print</span> (X.shape)        </span><br><span class="line">        X_ = np.linalg.inv(X.T.dot(X))  <span class="comment"># 公式求解 -- X.T表示转置，X.dot(Y)表示矩阵相乘</span></span><br><span class="line">        self.w = X_.dot(X.T).dot(y)     <span class="comment"># 返回theta的值</span></span><br></pre></td></tr></table></figure><p><strong>其中：$(X^TX)^{-1}$表示为：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X_ = np.linalg.inv(X.T.dot(X))  <span class="comment"># 公式求解 -- X.T表示转置，X.dot(Y)表示矩阵相乘</span></span><br><span class="line"> np.linalg.inv() 表示求逆矩阵</span><br></pre></td></tr></table></figure><p><strong>其中：$X^TY $表示为：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X.T.dot(X)</span><br></pre></td></tr></table></figure><h3 id="所以完整公式表示为："><a href="#所以完整公式表示为：" class="headerlink" title="所以完整公式表示为："></a>所以完整公式表示为：</h3><p>完整的公式：$\theta=(X^TX)^{-1}X^TY$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_.dot(X.T).dot(y)</span><br></pre></td></tr></table></figure><h2 id="由于我们最终得到的线性回归函数是即预测函数："><a href="#由于我们最终得到的线性回归函数是即预测函数：" class="headerlink" title="由于我们最终得到的线性回归函数是即预测函数："></a>由于我们最终得到的线性回归函数是即预测函数：</h2><p>线性回归方程：$y=\theta x+b​$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X)</span>:</span>               <span class="comment"># 测试集的测试反馈</span></span><br><span class="line">                                    <span class="comment"># 为偏置权值插入常数项</span></span><br><span class="line">    X = np.insert(X, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)  <span class="comment"># 增加一个维度</span></span><br><span class="line">    y_pred = X.dot(self.w)          <span class="comment"># 测试集与拟合的训练集相乘</span></span><br><span class="line">    <span class="keyword">return</span> y_pred                   <span class="comment"># 返回最终的预测值</span></span><br></pre></td></tr></table></figure><h2 id="其中得到的预测结果-y-pred-X-text-cdot-theta"><a href="#其中得到的预测结果-y-pred-X-text-cdot-theta" class="headerlink" title="其中得到的预测结果$y_pred=X_text\cdot\theta$"></a>其中得到的预测结果$y_pred=X_text\cdot\theta$</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_pred = X.dot(self.w)          <span class="comment"># 测试集与参数值相乘</span></span><br></pre></td></tr></table></figure><h2 id="最终得出线性回归代码："><a href="#最终得出线性回归代码：" class="headerlink" title="最终得出线性回归代码："></a>最终得出线性回归代码：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearRegression</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>          <span class="comment"># 新建变量</span></span><br><span class="line">        self.w = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X, y)</span>:</span>         <span class="comment"># 训练集的拟合</span></span><br><span class="line">        X = np.insert(X, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)  <span class="comment"># 增加一个维度</span></span><br><span class="line">        <span class="keyword">print</span> (X.shape)        </span><br><span class="line">        X_ = np.linalg.inv(X.T.dot(X))  <span class="comment"># 公式求解 -- X.T表示转置，X.dot(Y)表示矩阵相乘</span></span><br><span class="line">        self.w = X_.dot(X.T).dot(y)     <span class="comment"># 返回theta的值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X)</span>:</span>               <span class="comment"># 测试集的测试反馈</span></span><br><span class="line">                                        <span class="comment"># 为偏置权值插入常数项</span></span><br><span class="line">        X = np.insert(X, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)  <span class="comment"># 增加一个维度</span></span><br><span class="line">        y_pred = X.dot(self.w)          <span class="comment"># 测试集与拟合的训练集相乘</span></span><br><span class="line">        <span class="keyword">return</span> y_pred                   <span class="comment"># 返回最终的预测值</span></span><br></pre></td></tr></table></figure><h2 id="同时我们需要得出预测值与真实值的一个平方平均值"><a href="#同时我们需要得出预测值与真实值的一个平方平均值" class="headerlink" title="同时我们需要得出预测值与真实值的一个平方平均值"></a>同时我们需要得出预测值与真实值的一个平方平均值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mean_squared_error</span><span class="params">(y_true, y_pred)</span>:</span></span><br><span class="line">                                        <span class="comment">#真实数据与预测数据之间的差值（平方平均）</span></span><br><span class="line">    mse = np.mean(np.power(y_true - y_pred, <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> mse</span><br></pre></td></tr></table></figure><h2 id="最后就是进行我数据的加载，训练，测试过程以及可视化"><a href="#最后就是进行我数据的加载，训练，测试过程以及可视化" class="headerlink" title="最后就是进行我数据的加载，训练，测试过程以及可视化"></a>最后就是进行我数据的加载，训练，测试过程以及可视化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 第一步：导入数据</span></span><br><span class="line">    <span class="comment"># 加载糖尿病数据集</span></span><br><span class="line">    </span><br><span class="line">    diabetes = datasets.load_diabetes()</span><br><span class="line">    <span class="comment"># 只使用其中一个特征值</span></span><br><span class="line">    X = diabetes.data[:, np.newaxis, <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">print</span> (X.shape)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#第二步：将数据分为训练集以及测试集</span></span><br><span class="line">    x_train, x_test = X[:<span class="number">-20</span>], X[<span class="number">-20</span>:]</span><br><span class="line">    y_train, y_test = diabetes.target[:<span class="number">-20</span>], diabetes.target[<span class="number">-20</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#第三步：导入线性回归类（之前定义的）</span></span><br><span class="line">    clf = LinearRegression()</span><br><span class="line">    clf.fit(x_train, y_train)    <span class="comment"># 训练</span></span><br><span class="line">    y_pred = clf.predict(x_test) <span class="comment"># 测试</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#第四步：测试误差计算（需要引入一个函数）</span></span><br><span class="line">    <span class="comment"># 打印平均值平方误差</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Mean Squared Error:"</span>, mean_squared_error(y_test, y_pred))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#matplotlib可视化输出</span></span><br><span class="line">    <span class="comment"># Plot the results</span></span><br><span class="line">    plt.scatter(x_test[:,<span class="number">0</span>], y_test,  color=<span class="string">'black'</span>)         <span class="comment"># 散点输出</span></span><br><span class="line">    plt.plot(x_test[:,<span class="number">0</span>], y_pred, color=<span class="string">'blue'</span>, linewidth=<span class="number">3</span>) <span class="comment"># 预测输出</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="可视化结果"><a href="#可视化结果" class="headerlink" title="可视化结果"></a>可视化结果</h2><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/2019-03-10-ml-linearRegression-python/5.png" alt="image"></p><h2 id="完整线性回归的代码"><a href="#完整线性回归的代码" class="headerlink" title="完整线性回归的代码"></a>完整线性回归的代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment"># 导入可视化库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np               <span class="comment"># 导入数据处理库</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets     <span class="comment"># 导入sklearn自带的数据集</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearRegression</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>          <span class="comment"># 新建变量</span></span><br><span class="line">        self.w = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X, y)</span>:</span>         <span class="comment"># 训练集的拟合</span></span><br><span class="line">        X = np.insert(X, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)  <span class="comment"># 增加一个维度</span></span><br><span class="line">        <span class="keyword">print</span> (X.shape)        </span><br><span class="line">        X_ = np.linalg.inv(X.T.dot(X))  <span class="comment"># 公式求解 -- X.T表示转置，X.dot(Y)表示矩阵相乘</span></span><br><span class="line">        self.w = X_.dot(X.T).dot(y)     <span class="comment"># 返回theta的值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X)</span>:</span>               <span class="comment"># 测试集的测试反馈</span></span><br><span class="line">                                        <span class="comment"># 为偏置权值插入常数项</span></span><br><span class="line">        X = np.insert(X, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)  <span class="comment"># 增加一个维度</span></span><br><span class="line">        y_pred = X.dot(self.w)          <span class="comment"># 测试集与拟合的训练集相乘</span></span><br><span class="line">        <span class="keyword">return</span> y_pred                   <span class="comment"># 返回最终的预测值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mean_squared_error</span><span class="params">(y_true, y_pred)</span>:</span></span><br><span class="line">                                        <span class="comment">#真实数据与预测数据之间的差值（平方平均）</span></span><br><span class="line">    mse = np.mean(np.power(y_true - y_pred, <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> mse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 第一步：导入数据</span></span><br><span class="line">    <span class="comment"># 加载糖尿病数据集</span></span><br><span class="line">    diabetes = datasets.load_diabetes()</span><br><span class="line">    <span class="comment"># 只使用其中一个特征值(把一个422x10的矩阵提取其中一列变成422x1)</span></span><br><span class="line">    X = diabetes.data[:, np.newaxis, <span class="number">2</span>]  <span class="comment"># np.newaxis的作用就是在原来的数组上增加一个维度。2表示提取第三列数据</span></span><br><span class="line">    <span class="keyword">print</span> (X.shape)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二步：将数据分为训练集以及测试集</span></span><br><span class="line">    x_train, x_test = X[:<span class="number">-20</span>], X[<span class="number">-20</span>:]</span><br><span class="line">    print(x_train.shape,x_test.shape)  <span class="comment"># (422, 1) (20, 1)</span></span><br><span class="line">    <span class="comment"># 将目标分为训练/测试集合</span></span><br><span class="line">    y_train, y_test = diabetes.target[:<span class="number">-20</span>], diabetes.target[<span class="number">-20</span>:]</span><br><span class="line">    print(y_train.shape,y_test.shape)  <span class="comment"># (422,) (20,)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#第三步：导入线性回归类（之前定义的）</span></span><br><span class="line">    clf = LinearRegression()</span><br><span class="line">    clf.fit(x_train, y_train)    <span class="comment"># 训练</span></span><br><span class="line">    y_pred = clf.predict(x_test) <span class="comment"># 测试</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#第四步：测试误差计算（需要引入一个函数）</span></span><br><span class="line">    <span class="comment"># 打印平均值平方误差</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Mean Squared Error:"</span>, mean_squared_error(y_test, y_pred))  <span class="comment"># Mean Squared Error: 2548.072398725972</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#matplotlib可视化输出</span></span><br><span class="line">    <span class="comment"># Plot the results</span></span><br><span class="line">    plt.scatter(x_test[:,<span class="number">0</span>], y_test,  color=<span class="string">'black'</span>)         <span class="comment"># 散点输出</span></span><br><span class="line">    plt.plot(x_test[:,<span class="number">0</span>], y_pred, color=<span class="string">'blue'</span>, linewidth=<span class="number">3</span>) <span class="comment"># 预测输出</span></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性回归算法python实现&quot;&gt;&lt;a href=&quot;#线性回归算法python实现&quot; class=&quot;headerlink&quot; title=&quot;线性回归算法python实现&quot;&gt;&lt;/a&gt;线性回归算法python实现&lt;/h1&gt;&lt;h2 id=&quot;导入所需要的库文件&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="人工智能" scheme="https://lesama.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="机器学习" scheme="https://lesama.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://lesama.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="https://lesama.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-线性回归-推导总结</title>
    <link href="https://lesama.github.io/2019-03-08-ml-linearRegressionL1L2.html"/>
    <id>https://lesama.github.io/2019-03-08-ml-linearRegressionL1L2.html</id>
    <published>2019-03-08T11:14:30.000Z</published>
    <updated>2019-03-10T11:24:12.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性回归-推导总结"><a href="#线性回归-推导总结" class="headerlink" title="线性回归-推导总结"></a>线性回归-推导总结</h1><p>我们已经大致的知道了，线性回归的算法推导过程，但是往往我们在使用线性回归算法的过程中模型会出现<strong>过拟合的现象</strong>， 我们现从例子来看看什么是<strong>过拟合</strong>。</p><p>还是以房价预测为例，来看几张张图片：</p><h2 id="1-欠拟合（Underfitting）"><a href="#1-欠拟合（Underfitting）" class="headerlink" title="1.欠拟合（Underfitting）"></a><strong>1.欠拟合（Underfitting）</strong></h2><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/2019-03-08-ml-linearRegressionL1L2/1.png" alt="image"></p><p>上图中，我们用$h_\theta(x)=\theta_0+\theta_1x $来拟合训练集中的数据，但是我们可以很明显的从图中看出，房价是不会随着面积成比例的增长的，这种情况，我们就称之为<strong>欠拟合</strong>。</p><h2 id="2-过拟合（Overfitting）"><a href="#2-过拟合（Overfitting）" class="headerlink" title="2.过拟合（Overfitting）"></a><strong>2.过拟合（Overfitting）</strong></h2><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/2019-03-08-ml-linearRegressionL1L2/2.png" alt="image"></p><p>如上图所示，我们用一条高次的曲线 $h_θ(x)=θ_0+θ_1x+θ_2x^2+θ_3x^3+θ_4x^4$ 来拟合训练集中的数据，因为参数过多，对训练集的匹配度太高、太准确，以至于在后面的预测过程中可能会导致预测值非常偏离合适的值，预测非常不准确，也就是说能力太强了，导致震荡的非常强烈。这就是<strong>过拟合</strong>。 </p><h2 id="3-合适的拟合（Properfitting）"><a href="#3-合适的拟合（Properfitting）" class="headerlink" title="3.合适的拟合（Properfitting）"></a><strong>3.合适的拟合（Properfitting）</strong></h2><p>​                                    <img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/2019-03-08-ml-linearRegressionL1L2/3.png" alt="image"></p><p>如上图，如何参数选择的恰当，选用一个合适的曲线，比如说是$h_θ(x)=θ_0+θ_1x+θ_2x^2$来拟合上面的数据集就非常适合，这样这就是一个比较恰当的假设参数（hypothesis function）.</p><h2 id="简单总结一下"><a href="#简单总结一下" class="headerlink" title="简单总结一下"></a><strong>简单总结一下</strong></h2><p>一般在实际的应用中是不会遇到<strong>欠拟合</strong>的情况的，但是<strong>过拟合</strong>是经常出现的，一般情况下，<strong>过拟合</strong>（Overfitting）就是：如果我在训练一个数据集的时候，用了太多的特征（features）来训练一个假设函数，就会造成匹配度非常高（误差几乎就为0， 也就是我上一节得出的损失函数：$ J(θ)=∑_N^{i=1}(y_i−θ^Tx_i)^2$),但是不能推广到其他的未知数据上，也就是对于其他的训练集是没有任何用的，不能做出正确的预测。</p><p>所以为了避免这种<strong>过拟合现象</strong>的发生，我们也有对应得惩罚，让他的能力不要那么强，所以就有L1(LASSO)、岭回归L2(Ridge)。我们来直观的了解下这两种正则。</p><ol><li><p>最小均方函数导数不为0时，L2导数加上最小均方函数导数肯定不为0。但是L1的正则项是绝对值函数，导数为0只要在x从左边趋向于0和从右边趋向于0时导数异号就行，所以更容易得到稀疏解。</p></li><li><p>目标函数最小均方差解空间为同心圆，L2解空间也为同心圆，L1解空间为菱形，两个解空间相交处为最优值。如图所示。</p><p>​                                 <img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/2019-03-08-ml-linearRegressionL1L2/4.png" alt="image"></p></li></ol><h2 id="数学推导"><a href="#数学推导" class="headerlink" title="数学推导"></a>数学推导</h2><p>总结上节的知识点，我们就有三种方式解出线性回归算法的表达式或解析解：</p><ol><li>最小二乘法的解析解可以用高斯分布（Gaussian）以及最大似然估计法求得</li><li>岭回归Ridge（L2正则）的解析解可以用高斯分布（Gaussian）以及最大后验概率解释</li><li>LASSO（L1正则）的解释解可以用拉普拉斯（Laplace）分布以及最大后验概率解释</li></ol><h3 id="在推导之前："><a href="#在推导之前：" class="headerlink" title="在推导之前："></a>在推导之前：</h3><ol><li>假设你已经懂得：高斯分布，拉普拉斯分布，最大似然估计，最大后验估计</li><li>机器学习的三要素：<strong>模型、策略、算法</strong>（李航《统计学习方法》）。就是说，一种模型可以有多种求解策略，每一种求解策略可能又有多种计算方法。所以先把模型策略搞懂，然后算法。</li></ol><h1 id="线性回归模型总结"><a href="#线性回归模型总结" class="headerlink" title="线性回归模型总结"></a>线性回归模型总结</h1><p>首先我们先假设线性回归模型：</p><p>$f(x)= \sum_{i=1}^nx_iw_i+b=w^TX+b​$</p><p>其中$x \in R^{1\times n}, w\in R^{1\times n},当前已知：X=(x_1 \cdot \cdot \cdot x_m) \in R^{m\times n}, y \in R^{n\times 1}, b \in R$,求出$w$  </p><h2 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a>最小二乘法</h2><p>如果$b \sim N(u, \sigma^2)​$, 其中$u=0​$, 也就是说$y_i \sim N(w^TX,\sigma^2)​$</p><h3 id="采用最大似然估计法："><a href="#采用最大似然估计法：" class="headerlink" title="采用最大似然估计法："></a>采用最大似然估计法：</h3><p><strong>$L(w)=\prod_{i=1}^{N}\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(y_i-w^Tx_i)^2}{2\sigma^2})}$</strong></p><h3 id="对数似然函数："><a href="#对数似然函数：" class="headerlink" title="对数似然函数："></a>对数似然函数：</h3><p>$l(w)=-nlog\sigma\sqrt{2\pi}-\frac{1}{2\sigma^2}\sum_{i=1}^{n}(y_i-w^Tx_i)^2 ​$</p><p>因为我们要求的是似然函数的最大值：</p><p>$arg max_w \ L(w)=\prod_{i=1}^{N}\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(y_i-w^Tx_i)^2}{2\sigma^2})}​$</p><p>通过对数似然进行变换后，因为$-nlog\sigma\sqrt{2\pi}​$是定值，所以最终解析解：</p><p>$arg min_w f(w)=\frac{1}{2\sigma^2}\sum_{i=1}^{n}(y_i-w^Tx_i)^2 =||y-w^TX||_2^2​$</p><h2 id="岭回归Redge-L2正则"><a href="#岭回归Redge-L2正则" class="headerlink" title="岭回归Redge(L2正则)"></a>岭回归Redge(L2正则)</h2><p>如果$b \sim N(u, \sigma^2), w_i \sim N(u, \tau^2)$,其中$u=0$;</p><p>所以使用最大后验估计推导：</p><p>构建似然函数：</p><p>$L(w)=\prod_{i=1}^{n}\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(y_i-w^Tx_i)^2}{2\sigma^2})} \cdot \prod_{j=1}^{d}\frac{1}{\sqrt{2\pi}\tau}e^{-(\frac{(w_j)^2}{2\tau^2})}​$</p><p>对数似然函数</p><p>$l(w)=-nln\sigma\sqrt{2\pi}-\frac{1}{2\sigma^2}\sum_{i=1}^{n}(y_i-w^Tx_i)^2 -dln \tau \sqrt{2\pi}-\frac{1}{2\tau^2}\sum_{j=1}^{d}(w_j)^2 ​$</p><p>因为$-nln\sigma\sqrt{2\pi}-dln \tau \sqrt{2\pi}$是定值，最后的解析解：</p><p>$arg max_w \ L(w) = arg min_w f(w)=\frac{1}{2\sigma^2}\sum_{i=1}^{n}(y_i-w^Tx_i)^2+ \lambda\sum_{j=1}^{d}(w_j)^2 \\\  =||y-w^TX||_2^2+\lambda||w||_2^2 ​$</p><h2 id="LASSO-L1正则"><a href="#LASSO-L1正则" class="headerlink" title="LASSO(L1正则)"></a>LASSO(L1正则)</h2><p>如果$b \sim N(u, \sigma^2), w_i \sim Laplace(u,b)​$,其中$u=0​$;</p><p>所以使用最大后验估计推导：</p><p>构建似然函数：</p><p>$L(w)=\prod_{i=1}^{n}\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(y_i-w^Tx_i)^2}{2\sigma^2})} \cdot \prod_{j=1}^{d}\frac{1}{2b}e^{-(\frac{|w_i|}{b})}​$</p><p>对数似然：</p><p>$l(w)=-nln\sigma\sqrt{2\pi}-\frac{1}{2\sigma^2}\sum_{i=1}^{n}(y_i-w^Tx_i)^2 -dln 2b -\frac{1}{b}\sum_{j=1}^{d}|w_j| ​$</p><p>因为$-nln\sigma\sqrt{2\pi}-dln2b$是定值，最后的解析解：</p><p>$arg max_w \ L(w) = arg min_w f(w)=\frac{1}{2\sigma^2}\sum_{i=1}^{n}(y_i-w^Tx_i)^2+ \lambda\sum_{j=1}^{d}|w_j| \\\  =||y-w^TX||_2^2+\lambda||w||_1$</p><h2 id="线性回归正则化总结"><a href="#线性回归正则化总结" class="headerlink" title="线性回归正则化总结"></a>线性回归正则化总结</h2><p>L1正则化和L2正则化可以看做是损失函数的惩罚项，所谓『惩罚』是指对损失函数中的某些参数做一些限制 ，都能防止过拟合，一般L2的效果更好一些，L1能够产生稀疏模型，能够帮助我们去除某些特征，因此可以用于特征选择。</p><hr><ul><li>L2正则化可以防止模型过拟合（overfitting）；一定程度上，L1也可以防止过拟合</li><li>L1正则化可以产生稀疏权值矩阵，即产生一个稀疏模型，可以用于特征选择</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性回归-推导总结&quot;&gt;&lt;a href=&quot;#线性回归-推导总结&quot; class=&quot;headerlink&quot; title=&quot;线性回归-推导总结&quot;&gt;&lt;/a&gt;线性回归-推导总结&lt;/h1&gt;&lt;p&gt;我们已经大致的知道了，线性回归的算法推导过程，但是往往我们在使用线性回归算法的过程中
      
    
    </summary>
    
      <category term="人工智能" scheme="https://lesama.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="机器学习" scheme="https://lesama.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://lesama.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-线性回归-数学推导</title>
    <link href="https://lesama.github.io/2019-03-07-ml-linearRegression.html"/>
    <id>https://lesama.github.io/2019-03-07-ml-linearRegression.html</id>
    <published>2019-03-07T11:14:30.000Z</published>
    <updated>2019-03-10T11:20:53.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性回归-y-wx-b"><a href="#线性回归-y-wx-b" class="headerlink" title="线性回归-$y=wx+b$"></a><strong>线性回归</strong>-$y=wx+b$</h1><p><strong>回归</strong>，统计学术语，表示变量之间的某种数量依存关系，并由此引出回归方程，回归系数。</p><h2 id="线性回归（Linear-Regression）"><a href="#线性回归（Linear-Regression）" class="headerlink" title="线性回归（Linear Regression）"></a><strong>线性回归（Linear Regression）</strong></h2><p>数理统计中回归分析，用来确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法，其表达形式为$y = wx+e$，$e$为误差服从均值为0的正态分布，其中只有一个自变量的情况称为简单回归，多个自变量的情况叫多元回归。</p><p>注意，统计学中的回归并如线性回归非与严格直线函数完全能拟合，所以我们统计中称之为回归用以与其直线函数区别。 </p><p>我们先来看下这个表格</p><div class="table-container"><table><thead><tr><th>姓名</th><th>工资（元）</th><th>房屋面积（平方）</th><th>可贷款金额（元）</th></tr></thead><tbody><tr><td>张三</td><td>6000</td><td>58</td><td>30000</td></tr><tr><td>李四</td><td>9000</td><td>77</td><td>55010</td></tr><tr><td>王五</td><td>11000</td><td>89</td><td>73542</td></tr></tbody></table></div><p> 这个是近期比较火的现金贷产品的贷款额度。这个表格表示的是<strong>可贷款的金额 </strong>与 <strong>工资 </strong>和 <strong>房屋面积</strong>之间的关系，其中 <strong>工资</strong> 和 <strong>房屋面积</strong> 为 特征，<strong>可贷款金额</strong>为目标函数值。  那么根据线性函数可得到以下公式。 </p><p>$<br>h_\theta(x)=\theta_{1}x_{1}+\theta_{2}x_{2}<br>$</p><p>上面的这个式子是当一个模型只有两个特征$(x_1,x_2)$的时候的线性回归式子。  正常情况下，现金贷中可贷款的额度和用户的很多特征相关联，并不只是简单的这两个特征。所以我们需要把这个式子进行通用化。  假如有n个特征的话，那么式子就会变成下面的样子  </p><p>$<br>h_\theta(x)=\theta_{1}x_{1}+\theta_{2}x_{2} + \cdot \cdot \cdot \cdot \cdot+\theta_{n}x_{n} = \sum_{i=1}^{n}\theta_{i}x_{i}​<br>$</p><p><strong>利用矩阵的知识对线性公式进行整合</strong></p><p> 因为机器学习中基本上都是用矩阵的方式来表示参数的，也就是说我们需要把这个多项求和的式子用矩阵的方式表达出来，这样才方便后续的计算。  </p><p>$\theta_{i \times 1} = [\theta_1,\theta_2,\cdot\cdot\cdot\theta_i,]$     </p><p>$X_{i\times1}=[x_1,x_2,\cdot \cdot \cdot x_i]$</p><p><strong>把上述线性函数写成矩阵相乘的形式</strong></p><p>$<br>\theta^TX=\begin{bmatrix}  \theta_1 \\\  \theta_2 \\\ \cdot \\\ \cdot \\\ \cdot \\\ \theta_i \end{bmatrix} \cdot [x_1,x_2,\cdot \cdot \cdot x_i] = \sum_{i=1}^{n}\theta_{i}x_{i}<br>​$<br>我们把权重参数和特征参数，都看成是1行n列的矩阵(或者是行向量)。那么就可以根据矩阵乘法的相关知识，把上述多项求和的式子，转换成矩阵的乘法的表达式。  由此我们就把多项求和化简称了 。</p><p>$<br>h_\theta(x)=\theta^TX​<br>$</p><h2 id="误差项的分析"><a href="#误差项的分析" class="headerlink" title="误差项的分析"></a>误差项的分析</h2><p>原式:$y =wx+b$ 其中$b$就是我们所说的偏移量，或者叫误差项。</p><p>我们再看看下面这个图：</p><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/2019-03-07-ml-linearRegression/2.png" alt="image"></p><p>图中的横坐标$x_1$ 和 X$x)_2$分别代表着 两个特征(工资、房屋平米) 。纵坐标Y代表目标(可贷款的额度)。其中红点代表的就是实际的目标值(每个人可贷款的额度).而平面上和红点竖向相交的点代表着我们根据线性回归模型得到的点。也就是说实际得到的钱和预估的钱之间是有一定误差的，这个就是误差项。  因为误差项是真实值和误差值之间的一个差距。那么肯定我们希望误差项越小越好。  </p><p>然后我们对应整理成线性回归函数：</p><p>$<br>h_\theta(x)=\theta^Tx+\varepsilon​<br>$</p><p>我们根据实际情况，假设认为这个误差项是满足以下几个条件的。 </p><ol><li>误差$\varepsilon_{(i)}​$是独立。</li><li>具有相同的分布。</li><li>服从均值为0方差为$\theta^2$的高斯分布。</li></ol><p>然我们回到刚开始的现金贷产品的贷款额度问题上面</p><p>  1.独立：张三和李四一起使用这款产品，可贷款额互不影响  </p><p>  2.同分布：张三和李四是使用的是同一款产品  </p><p>  3.高斯分布：绝大多数的情况下，在一个的空间内浮动不大 </p><h1 id="似然函数的理解"><a href="#似然函数的理解" class="headerlink" title="似然函数的理解"></a>似然函数的理解</h1><p>由前面两步，我们已经把线性回归模型，推导成下面的这个式子了 </p><p>$y_{(i)}=\theta^Tx_i+\varepsilon_i$</p><p>我们已经知道误差项是符合高斯分布的，所以误差项的概率值：</p><p>$<br>P(\varepsilon_i)=\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(\varepsilon_i)^2}{2\sigma^2})}<br>$<br>然后把误差值带入式子中:</p><p>$<br>P(y_i|x_i,\theta)=\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(y_i-\theta^Tx_i)^2}{2\sigma^2})}​<br>$<br>由于是误差值，所以是越小越好，所以我们接下来就是讨论什么样的特征值和特征组合能够让误差值最小，现在就要看似然函数的作用了，似然函数的作用就是要根据样本求什么样的参数和特征的组成能够接近真实值，所以越接近真实值则误差就越小。</p><p>引入似然函数(似然函数就是求能让真实值和预测值相等的那个参数的 )：</p><p>$<br>L(\theta) = \prod_{i=1}^{N} P(y_i|x_i,\theta)=\prod_{i=1}^{N}\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(y_i-\theta^Tx_i)^2}{2\sigma^2})}<br>$</p><p>$\prod​$表示各元素相乘的结果</p><p>上面的式子是多个参数的乘积的形式，很难进行计算，所以我们又采用了对数的一个小技巧，把多个数相乘，转化成多个数相加的形式。 </p><p>因为对数的性质</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logA\cdot B = logA+logB​</span><br></pre></td></tr></table></figure><p>根据上面的这种换算关系，我们就把似然函数的式子换算成下面的这个。  (因为似然函数是越大越好，似然函数的值和对数似然函数的值是成正比的，对值求对数，并不会影响到最后求极限的值。所以才敢进行对数处理。)  </p><p>$<br>l(\theta) = logL(\theta) = log\prod_{i=1}^{N}\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(y_i-\theta^Tx_i)^2}{2\sigma^2})}​<br>$<br>对上式进行整理：</p><p>$l(\theta) = logL(\theta) = \sum_{i=1}^{N}log\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(y_i-\theta^Tx_i)^2}{2\sigma^2})}$</p><p>$= \sum_{i=1}^{N}(log\frac{1}{\sqrt{2\pi}\sigma}+loge^{-(\frac{(y_i-\theta^Tx_i)^2}{2\sigma^2})})​$</p><p>$= Nlog\frac{1}{\sqrt{2\pi}\sigma}-\frac{1}{2\sigma^2}\sum_{i=1}^{N}(y_i-\theta^Tx_i)^2 $</p><p>因为：</p><p>$Nlog\frac{1}{\sqrt{2\pi}\sigma}​$ 是一个定值</p><p>似然函数是要越大越好</p><p>所以：</p><p>$-\frac{1}{2\sigma^2}(y_i-\theta^Tx_i)^2$越小越好</p><p>再因为：</p><p>$-\frac{1}{2\sigma^2}​$也为定值</p><p>最终：</p><p>$<br>l(\theta) = \sum_{i=1}^{N}(y_i-\theta^Tx_i)^2​<br>$</p><h2 id="越小越好———最小二乘法（损失函数）"><a href="#越小越好———最小二乘法（损失函数）" class="headerlink" title="越小越好———最小二乘法（损失函数）"></a>越小越好———最小二乘法（损失函数）</h2><h3 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a><strong>最小二乘法</strong></h3><p>$<br>\sum_{i=1}^{N}(y_i-\theta^Tx_i)^2<br>$</p><p>上述代价函数中使用的均方误差，其实对应了我们常用的欧几里得的距离（欧式距离，<strong>Euclidean Distance</strong>）, 基于均方误差最小化进行模型求解的方法称为“最小二乘法”（<strong>least square method</strong>），即通过最小化误差的平方和寻找数据的最佳函数匹配；</p><p>当函数子变量为一维时，最小二乘法就蜕变成寻找一条直线；</p><p> 然后我们把得到的损失函数推广到n维，转换成矩阵形式（参考前面利用矩阵的知识对线性公式进行整合）：</p><p><strong>$J(\theta)=\sum_{i=1}^{N}(y_i-\theta^Tx_i)^2​$       为损失函数</strong></p><p>其对应的均方误差表示为如下矩阵</p><p><strong><em>$J(\theta) = {(y-X\theta)^T(y-X\theta)}​$</em></strong>   </p><p><strong>其中X：</strong></p><p>$X=\begin{bmatrix} 1 &amp;&amp; x_1^T  \\\ 1 &amp;&amp; x_2^T  \\\ \cdot \\\ \cdot \\\ \cdot  \\\ 1 &amp;&amp; x_N^T \end{bmatrix} =\begin{bmatrix} 1 &amp;&amp;    x_{11} &amp;&amp; x_{12}  &amp;&amp; \cdot \cdot \cdot  x_{1n}  \\\ 1 &amp;&amp; x_{21} &amp;&amp; x_{22} &amp;&amp; \cdot \cdot \cdot x_{2n}   \\\ \cdot  \\\  \cdot \\\ \cdot \\\ 1&amp;&amp; x_{m1} &amp;&amp; x_{m2}  &amp;&amp; \cdot \cdot \cdot x_{mn}  \end{bmatrix} ​$</p><p> 对$\theta​$求导</p><p><strong>$J(\theta) = {(y-X\theta)^T(y-X\theta)}=y^Ty-y^Tx\theta-\theta^Tx^Ty+\theta^Tx^Tx\theta​$</strong>   </p><p>$\frac{\partial J(\theta)}{\partial(\theta)} = \frac{\partial y^Ty}{\partial(\theta)} - \frac{\partial y^Tx\theta}{\partial(\theta)} - \frac{\partial \theta^Tx^Ty}{\partial(\theta)} + \frac{\partial \theta^Tx^Tx\theta}{\partial(\theta)} ​$</p><p>$\frac{\partial J(\theta)}{\partial(\theta)} = 0-x^Ty-x^Ty+2x^Tx\theta​$</p><p>$\frac{\partial J(\theta)}{\partial(\theta)} =2x^T(x\theta-y)​$</p><p>根据导数的性质，该值在导数为0时为最小</p><p>所以：根据微积分定理，令上式等于零，可以得到 θ 最优的闭式解。当 </p><p>$2(x^Ty-x^Tx\theta)=0$时取得最小</p><p>矩阵求导的知识：</p><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/2019-03-07-ml-linearRegression/3.png" alt="image"></p><p><strong>最终：</strong><br>$<br>\theta = (x^Tx)^{-1}x^Ty​<br>$</p><p>X和Y都是已知的，那么得到了最终的参数值。 </p><h2 id="我们来看看数学原理"><a href="#我们来看看数学原理" class="headerlink" title="我们来看看数学原理"></a>我们来看看<strong>数学原理</strong></h2><p><strong>微积分角度来讲</strong>，最小二乘法是采用非迭代法，针对代价函数求导数而得出全局极值，进而对所给定参数进行估算。</p><p><strong>计算数学角度来讲</strong>，最小二乘法的本质上是一个线性优化问题，试图找到一个最优解。</p><p><strong>线性代数角度来讲</strong>，最小二乘法是求解线性方程组，当方程个数大于未知量个数，其方程本身 无解，而最小二乘法则试图找到最优残差。</p><p><strong>几何角度来讲</strong>，最小二乘法中的几何意义是高维空间中的一个向量在低维子空间的投影。</p><p><strong>概率论角度来讲</strong>，如果数据的观测误差是/或者满足高斯分布，则最小二乘解就是使得观测数据出现概率最大的解，即<strong>最大似然估计-Maximum Likelihood Estimate，MLE</strong>（利用已知的样本结果，反推最有可能（最大概率）导致这样结果的参数值）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性回归-y-wx-b&quot;&gt;&lt;a href=&quot;#线性回归-y-wx-b&quot; class=&quot;headerlink&quot; title=&quot;线性回归-$y=wx+b$&quot;&gt;&lt;/a&gt;&lt;strong&gt;线性回归&lt;/strong&gt;-$y=wx+b$&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;回归&lt;/s
      
    
    </summary>
    
      <category term="人工智能" scheme="https://lesama.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="机器学习" scheme="https://lesama.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://lesama.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数值类型与序列类型</title>
    <link href="https://lesama.github.io/python-numerical-sequence.html"/>
    <id>https://lesama.github.io/python-numerical-sequence.html</id>
    <published>2019-02-25T13:40:51.000Z</published>
    <updated>2019-03-12T10:40:33.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-数值类型"><a href="#1-数值类型" class="headerlink" title="1. 数值类型"></a>1. 数值类型</h1><h2 id="1-1-int（整型）"><a href="#1-1-int（整型）" class="headerlink" title="1.1 int（整型）"></a>1.1 int（整型）</h2><p>整型也就是我们日常中的整数，在Python中不需要声明变量，直接赋值即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">print(type(a))</span><br></pre></td></tr></table></figure><h2 id="1-2-float（浮点型）"><a href="#1-2-float（浮点型）" class="headerlink" title="1.2 float（浮点型）"></a>1.2 float（浮点型）</h2><h3 id="基本情况"><a href="#基本情况" class="headerlink" title="基本情况"></a>基本情况</h3><p>浮点型一般是我们常见的小数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="number">2.2</span></span><br><span class="line">print(type(b))</span><br></pre></td></tr></table></figure><h3 id="decimal库"><a href="#decimal库" class="headerlink" title="decimal库"></a>decimal库</h3><p>但是<code>浮点数</code>不是我们真正看到的数，比如<code>1.2</code>实际是<code>1.1999999999</code></p><p>所以小数计算都是不精确的，那么我们如何进行精确计算呢？</p><p>在Python中如果我们要实现精确计算，我们是使用decimal这个库函数 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> decimal </span><br><span class="line"></span><br><span class="line">a = decimal.Decimal(<span class="string">'2.2'</span>)</span><br><span class="line">b = decimal.Decimal(<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">print(a-b)</span><br></pre></td></tr></table></figure><h3 id="基本整数与小数四则运算"><a href="#基本整数与小数四则运算" class="headerlink" title="基本整数与小数四则运算"></a>基本整数与小数四则运算</h3><p>计算机在计算的时候，除了整数运算，还有小数运算，还有小数和整数的混合运算</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td style="text-align:center">3 + 4 输出 7</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td style="text-align:center">8 - 6 输出 2</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td style="text-align:center">3 * 4 输出 12</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td><td style="text-align:center">6 / 3 输出 2.0</td></tr><tr><td style="text-align:center">//</td><td style="text-align:center">向下取整</td><td style="text-align:center">9 // 2 输出结果 4 , 9.0//2.0 输出结果 4.0</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取余</td><td style="text-align:center">6 % 4 输出 2</td></tr><tr><td style="text-align:center">**</td><td style="text-align:center">幂</td><td style="text-align:center">2 ** 3 输出 8</td></tr></tbody></table></div><p><strong>向上取整：使用<code>math库</code>函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.ceil(<span class="number">2.3</span>/<span class="number">2</span>)  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>​       </p><h2 id="1-3-bool（布尔类型）"><a href="#1-3-bool（布尔类型）" class="headerlink" title="1.3 bool（布尔类型）"></a>1.3 bool（布尔类型）</h2><p>布尔类型只有<code>True</code>和<code>False</code>两种值 ，<strong>在数值计算中，True表示1，False表示0。</strong></p><h2 id="1-4-complex-（复数）"><a href="#1-4-complex-（复数）" class="headerlink" title="1.4  complex （复数）"></a>1.4  complex （复数）</h2><p>复数由<strong>实数部分</strong>和<strong>虚数部分</strong>构成，可以用<code>a + bj</code>,或者<code>complex(a,b)</code>表示， 复数的实部a和虚部b都是浮点型。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">5</span> + <span class="number">6j</span></span><br><span class="line">d = complex(<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">print(type(c))</span><br><span class="line">print(type(d))</span><br></pre></td></tr></table></figure><h1 id="2-序列类型"><a href="#2-序列类型" class="headerlink" title="2. 序列类型"></a>2. 序列类型</h1><p>​             </p><h2 id="2-1-字符串（str）"><a href="#2-1-字符串（str）" class="headerlink" title="2.1 字符串（str）"></a>2.1 字符串（str）</h2><p>​    </p><h3 id="字符串的表示形式"><a href="#字符串的表示形式" class="headerlink" title="字符串的表示形式"></a>字符串的表示形式</h3><p>​    </p><p>在<code>Python3</code>中字符串有3中表示方式，如下</p><p>a. 使用单引号（’）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">st1 = <span class="string">'hello world'</span></span><br><span class="line">print(st1)</span><br></pre></td></tr></table></figure><p>b. 使用双引号（”）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">st2 = <span class="string">"hello world"</span> <span class="comment">#双引号中的字符串与单引号中的字符串用法完全相同</span></span><br><span class="line">print(st2)</span><br></pre></td></tr></table></figure><p>c. 使用三引号（’’’）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">st2 = <span class="string">'''hello</span></span><br><span class="line"><span class="string">world'''</span>  <span class="comment">#三引号可表示多行的字符串，可以在三引号中自由的使用单引号和双引号</span></span><br><span class="line">print(st2)</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="字符串的使用"><a href="#字符串的使用" class="headerlink" title="字符串的使用"></a>字符串的使用</h3><p><code>字符串的截取</code>，语法格式如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量[头下标:尾下标] <span class="comment">#索引值以 0 为开始值，-1 为从末尾的开始位置。</span></span><br></pre></td></tr></table></figure><p>实例如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st2 = &apos;Runoob&apos;</span><br><span class="line"> </span><br><span class="line">print (st2)          # 输出字符串</span><br><span class="line">print (st2[0:-1])    # 输出第一个到倒数第二个的所有字符</span><br><span class="line">print (st2[0])       # 输出字符串第一个字符</span><br><span class="line">print (st2[2:5])     # 输出从第三个开始到第五个的字符</span><br><span class="line">print (st2[2:])      # 输出从第三个开始的后的所有字符</span><br><span class="line">print (st2 * 2)      # 输出字符串两次</span><br><span class="line">print (st2 + &quot;TEST&quot;) # 连接字符串</span><br></pre></td></tr></table></figure><p>​    </p><p>Python 使用反斜杠<code>\</code>转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'楽\no'</span>)</span><br><span class="line"><span class="comment">#输出：楽</span></span><br><span class="line"><span class="comment"># oob</span></span><br><span class="line">print(<span class="string">r'楽\no'</span>)</span><br><span class="line"><span class="comment">#输出：楽\no</span></span><br></pre></td></tr></table></figure><p>另外，反斜杠<code>\</code>可以作为续行符，表示下一行是上一行的延续。也可以使用 <strong>“””…”””</strong> 或者 <strong>‘’’…’’’</strong> 跨越多行。</p><p><strong>总结：</strong></p><ol><li>反斜杠可以用来转义，使用r可以让反斜杠不发生转义。</li><li>字符串可以用+运算符连接在一起，用*运算符重复。</li><li>Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。</li><li>Python中的字符串不能改变 。</li></ol><p>​    </p><h2 id="2-2-列表（list）"><a href="#2-2-列表（list）" class="headerlink" title="2.2 列表（list）"></a>2.2 列表（list）</h2><p>​    </p><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><p>列表是写在方括号<code>[]</code> 之间,用逗号分隔开的元素列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list0 = [<span class="number">1</span>,<span class="string">'a'</span>,[<span class="number">2</span>]]</span><br><span class="line">print(type(list0))</span><br></pre></td></tr></table></figure><p>​     </p><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'abcd'</span>,<span class="number">786</span>,<span class="number">2.23</span>,<span class="string">'楽'</span>,<span class="number">70.2</span> ]</span><br><span class="line">list2 = [<span class="number">123</span>, <span class="string">'楽'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (list1)            <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="keyword">print</span> (list1[<span class="number">0</span>])         <span class="comment"># 输出列表第一个元素</span></span><br><span class="line"><span class="keyword">print</span> (list1[<span class="number">1</span>:<span class="number">3</span>])       <span class="comment"># 从第二个开始输出到第三个元素</span></span><br><span class="line"><span class="keyword">print</span> (list1[<span class="number">2</span>:])        <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="keyword">print</span> (list2 * <span class="number">2</span>)        <span class="comment"># 输出两次列表</span></span><br><span class="line"><span class="keyword">print</span> (list1 + list2)    <span class="comment"># 连接列表</span></span><br></pre></td></tr></table></figure><p>与Python字符串不一样的是，<strong>列表中的元素是可以改变的</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">a[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line"></span><br><span class="line">print(a) <span class="comment">#[9, 2, 13, 14, 15, 6]</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">2</span>:<span class="number">5</span>] = []   <span class="comment"># 将对应的元素值设置为 [] </span></span><br><span class="line">print(a)   <span class="comment">#[9, 2, 6]</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li>List写在方括号之间，元素用逗号隔开。</li><li>和字符串一样，list可以被索引和切片。</li><li>List可以使用+操作符进行拼接。</li><li>List中的元素是可以改变的。</li></ol><p>​    </p><h2 id="2-3-元组"><a href="#2-3-元组" class="headerlink" title="2.3 元组"></a>2.3 元组</h2><p>​       </p><p>元组（tuple）与列表类似，<strong>不同之处在于元组的元素不能修改</strong>。元组写在小括号 <code>()</code>里，元素之间用逗号隔开。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tup = ( <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'楽'</span>, <span class="number">70.2</span>  )</span><br><span class="line">tinytup = (<span class="number">123</span>, <span class="string">'楽'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (tup)             <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="keyword">print</span> (tup[<span class="number">0</span>])          <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="keyword">print</span> (tup[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line"><span class="keyword">print</span> (tup[<span class="number">2</span>:])         <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="keyword">print</span> (tinytup * <span class="number">2</span>)     <span class="comment"># 输出两次元组</span></span><br><span class="line"><span class="keyword">print</span> (tup + tinytup)   <span class="comment"># 连接元组</span></span><br></pre></td></tr></table></figure><p>元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取。</p><p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p><p>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup1 = ()    <span class="comment"># 空元组</span></span><br><span class="line">tup2 = (<span class="number">20</span>,) <span class="comment"># 一个元素，需要在元素后添加逗号</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li><p>与字符串一样，元组的元素不能修改。</p></li><li><p>元组也可以被索引和切片，方法一样。</p></li><li><p>注意构造包含 0 或 1 个元素的元组的特殊语法规则。</p></li><li><p>元组也可以使用+操作符进行拼接。</p><p>​    </p><h1 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3. 扩展"></a>3. 扩展</h1></li></ol><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><code>字符串转列表</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'abcd'</span></span><br><span class="line">b = list(a)</span><br><span class="line"></span><br><span class="line">print(type(a))</span><br><span class="line">print(type(b))</span><br><span class="line">print(b) <span class="comment">#['a', 'b', 'c', 'd']</span></span><br></pre></td></tr></table></figure><p><code>列表转字符串</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">b = str(a)</span><br><span class="line"></span><br><span class="line">print(type(a))</span><br><span class="line">print(type(b))</span><br><span class="line">print(b)  <span class="comment">#"['a', 'b', 'c', 'd']"</span></span><br></pre></td></tr></table></figure><p><code>字符串转元组</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'abcd'</span></span><br><span class="line">b = tuple(a)</span><br><span class="line"></span><br><span class="line">print(type(a))</span><br><span class="line">print(type(b))</span><br><span class="line">print(b)  <span class="comment">#('a', 'b', 'c', 'd')</span></span><br></pre></td></tr></table></figure><p>​     </p><p><code>元组转字符串</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br><span class="line">b = str(a)</span><br><span class="line"></span><br><span class="line">print(type(a))</span><br><span class="line">print(type(b))</span><br><span class="line">print(b)    <span class="comment">#"('a', 'b', 'c', 'd')"</span></span><br></pre></td></tr></table></figure><p>​     </p><h2 id="拆包"><a href="#拆包" class="headerlink" title="拆包"></a>拆包</h2><p>​     </p><p>元组拆包可以应用到任何迭代对象上， 唯一的要求是， 被可迭代对象中的元素数量必须要和这些元素的元组的空档数一致， 除非我们用<code>*</code>来表示忽略多余的元素。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br><span class="line">x,*y,z = a</span><br><span class="line"></span><br><span class="line">print(x)    <span class="comment">#'a'</span></span><br><span class="line">print(z)    <span class="comment">#'d'</span></span><br><span class="line">print(y)    <span class="comment">#['b', 'c']</span></span><br></pre></td></tr></table></figure><p><code>x</code> 接收第一个元素，<code>z</code> 接收最后一个元素，由于<code>y</code>前面有<code>*</code>号，所以剩余的元素由<code>y</code>接收</p><p>总结：有多少个元素就需要多少个变量来接收，除非有<code>*</code>号，不然就会报错.</p><p>​     </p><h2 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h2><p>​         </p><p>变量的保存都是保存在内存中</p><p>注意：<strong>变量</strong>是没有类型的，有类型的是他所<strong>指向的数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> a = <span class="number">123</span></span><br><span class="line">b = <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>（id(a)） <span class="comment"># 10923232</span></span><br><span class="line">print(id(b))   <span class="comment"># 140343125492152</span></span><br><span class="line"><span class="comment">#id()：查看数据的地址</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">'111'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>（id(a)）  <span class="comment"># 140342939172344</span></span><br></pre></td></tr></table></figure><p>赋值给变量是保存在内存中，重新赋值后，变量指向新的地址 </p><p>​        </p><h2 id="变量的引用-成员运算"><a href="#变量的引用-成员运算" class="headerlink" title="变量的引用-成员运算"></a>变量的引用-成员运算</h2><p>​          </p><p>通过<code>in</code>或者<code>not in</code> 来进行成员运算 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'abcd123'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'c'</span> <span class="keyword">in</span> a)       <span class="comment">#True</span></span><br><span class="line">print(<span class="string">'8'</span> <span class="keyword">in</span> a)        <span class="comment">#False</span></span><br><span class="line">print(<span class="string">'a'</span> <span class="keyword">not</span> <span class="keyword">in</span> a)   <span class="comment">#False</span></span><br><span class="line">print(<span class="string">'q'</span> <span class="keyword">not</span> <span class="keyword">in</span> a)   <span class="comment">#True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-数值类型&quot;&gt;&lt;a href=&quot;#1-数值类型&quot; class=&quot;headerlink&quot; title=&quot;1. 数值类型&quot;&gt;&lt;/a&gt;1. 数值类型&lt;/h1&gt;&lt;h2 id=&quot;1-1-int（整型）&quot;&gt;&lt;a href=&quot;#1-1-int（整型）&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Python" scheme="https://lesama.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://lesama.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="数据类型" scheme="https://lesama.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>JQuery</title>
    <link href="https://lesama.github.io/JQuery.html"/>
    <id>https://lesama.github.io/JQuery.html</id>
    <published>2019-02-16T09:08:18.000Z</published>
    <updated>2019-03-12T10:40:38.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-JQ简介"><a href="#1-JQ简介" class="headerlink" title="1. JQ简介"></a>1. JQ简介</h1><h2 id="1-1-什么是JQ"><a href="#1-1-什么是JQ" class="headerlink" title="1.1 什么是JQ"></a>1.1 什么是JQ</h2><p>​    JQ是JS写的插件库，说白了，就是一个js文件</p><h2 id="1-2-JS和JQ是区别"><a href="#1-2-JS和JQ是区别" class="headerlink" title="1.2 JS和JQ是区别"></a>1.2 JS和JQ是区别</h2><p>​    凡是用jq能实现的，js都能实现，js能实现的，jq却不一定能实现</p><h2 id="1-3-JQ的理念"><a href="#1-3-JQ的理念" class="headerlink" title="1.3 JQ的理念"></a>1.3 JQ的理念</h2><p>​    减少代码量，提高工作效率</p><h2 id="1-4-JQ的引入"><a href="#1-4-JQ的引入" class="headerlink" title="1.4 JQ的引入"></a>1.4 JQ的引入</h2><h3 id="1-4-1-本地文件引入"><a href="#1-4-1-本地文件引入" class="headerlink" title="1.4.1 本地文件引入"></a>1.4.1 本地文件引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.2.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-2-CDN引入"><a href="#1-4-2-CDN引入" class="headerlink" title="1.4.2 CDN引入"></a>1.4.2 CDN引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相应网站：<a href="https://www.bootcdn.cn/jquery/" target="_blank" rel="noopener">https://www.bootcdn.cn/jquery/</a></p><h1 id="2-JQ的基本使用"><a href="#2-JQ的基本使用" class="headerlink" title="2. JQ的基本使用"></a>2. JQ的基本使用</h1><p>在JavaScript中，用$声明使用的是jQuery,例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    $('button').click(function()&#123;</span></span><br><span class="line"><span class="undefined">        alert(123);//点击button时弹出123</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-1-JQ的选择器"><a href="#2-1-JQ的选择器" class="headerlink" title="2.1 JQ的选择器"></a>2.1 JQ的选择器</h2><p>在jQ中使用选择器选择元素和在CSS中使用CSS选择器是一样的 ，上面那个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    $('button').click(function()&#123;//使用的是标签选择器</span></span><br><span class="line"><span class="undefined">        alert(123);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    $('#btn').click(function()&#123;//使用的是类选择器</span></span><br><span class="line"><span class="undefined">        alert(123);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然在使用过程中也可以用后代选择器，兄弟选择器之类的选择器</p><h2 id="2-2-基本使用1"><a href="#2-2-基本使用1" class="headerlink" title="2.2 基本使用1"></a>2.2 基本使用1</h2><p>我们首先看下面代码，方便后面讲解</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span> <span class="attr">class</span>=<span class="string">"p11"</span>&gt;</span>我是段落标签一<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span> <span class="attr">class</span>=<span class="string">"p11"</span>&gt;</span>我是段落标签二<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p3"</span> <span class="attr">class</span>=<span class="string">"p11"</span>&gt;</span>我是段落标签三<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是文本标签一<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是文本标签二<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var p1 = document.getElementById("p1");</span></span><br><span class="line"><span class="undefined">    $("#p1");</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-1-JS与JQ之间的转换"><a href="#2-2-1-JS与JQ之间的转换" class="headerlink" title="2.2.1 JS与JQ之间的转换"></a>2.2.1 JS与JQ之间的转换</h3><h4 id="1-jq转js：get-与"><a href="#1-jq转js：get-与" class="headerlink" title="(1) jq转js：get()与[]"></a>(1) jq转js：get()与[]</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$("p").get(2).innerText = '1111111';</span><br><span class="line">$("p")[1].innerText = '222222';</span><br></pre></td></tr></table></figure><p>get()与[]中填写索引值，然后对其进行操作。</p><h4 id="2-js转jq"><a href="#2-js转jq" class="headerlink" title="(2) js转jq"></a>(2) js转jq</h4><p>用$()将js定义的变量括起来，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(p1) //js转jq</span><br></pre></td></tr></table></figure><h5 id="html"><a href="#html" class="headerlink" title="html()"></a>html()</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(p1).html(123123); //html等同于js的innerHtml</span><br></pre></td></tr></table></figure><h5 id="text"><a href="#text" class="headerlink" title="text()"></a>text()</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(p1).text(123123); //text等同于js的innerText</span><br></pre></td></tr></table></figure><h3 id="2-2-2-鼠标事件"><a href="#2-2-2-鼠标事件" class="headerlink" title="2.2.2 鼠标事件"></a>2.2.2 鼠标事件</h3><h4 id="1-单击：click"><a href="#1-单击：click" class="headerlink" title="(1) 单击：click()"></a>(1) 单击：click()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#p1&quot;).click(function () &#123;</span><br><span class="line">        alert(123)</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="2-鼠标移入移出"><a href="#2-鼠标移入移出" class="headerlink" title="(2) 鼠标移入移出"></a>(2) 鼠标移入移出</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$("#p1").hover(function () &#123;</span><br><span class="line">       $("#p2").html("鼠标移入效果") //鼠标移入</span><br><span class="line">   &#125;,function () &#123;</span><br><span class="line">       $("#p2").html("鼠标移出效果") //鼠标移出</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h3 id="2-2-3-追加与添加"><a href="#2-2-3-追加与添加" class="headerlink" title="2.2.3 追加与添加"></a>2.2.3 追加与添加</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$("#p1").append("<span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p1的兄弟<span class="tag">&lt;/<span class="name">p</span>&gt;</span>"); //将双引号内的内容追加到#p1后面</span><br><span class="line">$("#p1").prepend("<span class="tag">&lt;<span class="name">p</span>&gt;</span>我也是p1的兄弟<span class="tag">&lt;/<span class="name">p</span>&gt;</span>"); //将双引号内的内容添加到#p1前面</span><br></pre></td></tr></table></figure><h3 id="2-2-4-遍历：each"><a href="#2-2-4-遍历：each" class="headerlink" title="2.2.4 遍历：each"></a>2.2.4 遍历：each</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$("ul li").each(function (i) &#123;</span><br><span class="line">        $(this).html("我是第"+i+"个") //this是指遍历的当前的对象自己</span><br><span class="line">alert($(this).index()); //弹出遍历的当前的对象的索引值</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="2-2-5-操作属性"><a href="#2-2-5-操作属性" class="headerlink" title="2.2.5 操作属性"></a>2.2.5 操作属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$("#div1").attr("class","b");  //添加类属性，类名为b</span><br><span class="line">$("#div1").removeAttr("class") //删除属性class</span><br></pre></td></tr></table></figure><h3 id="2-2-6-操作class类名"><a href="#2-2-6-操作class类名" class="headerlink" title="2.2.6 操作class类名"></a>2.2.6 操作class类名</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$("#div1").addClass("div321"); //添加类名</span><br><span class="line">$("#div1").removeClass(); //删除类名</span><br></pre></td></tr></table></figure><h3 id="2-2-7-判断属性"><a href="#2-2-7-判断属性" class="headerlink" title="2.2.7 判断属性"></a>2.2.7 判断属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert($("#div1").hasClass("div222")); //判断div1中是否存在类名为div222</span><br></pre></td></tr></table></figure><h3 id="2-2-8-滚动条事件"><a href="#2-2-8-滚动条事件" class="headerlink" title="2.2.8 滚动条事件"></a>2.2.8 滚动条事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(window).scroll(function () &#123;</span><br><span class="line">console.log($(document).scrollTop()); //打印滚动条与顶部的距离</span><br><span class="line">console.log($(document).scrollLeft()) //打印滚动条与左边的距离</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-2-9-查找元素"><a href="#2-2-9-查找元素" class="headerlink" title="2.2.9 查找元素"></a>2.2.9 查找元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log($("#div1").parent()); //查找父级元素body</span><br><span class="line">console.log($("#div1").children()); //查找子级元素</span><br><span class="line">console.log($("#p1").siblings()); //查找兄弟元素</span><br><span class="line">console.log($("#div1").find("span")); //查找后代元素</span><br><span class="line">console.log($("#sp1").parents("p")); //查找祖辈元素</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-JQ简介&quot;&gt;&lt;a href=&quot;#1-JQ简介&quot; class=&quot;headerlink&quot; title=&quot;1. JQ简介&quot;&gt;&lt;/a&gt;1. JQ简介&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是JQ&quot;&gt;&lt;a href=&quot;#1-1-什么是JQ&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="web" scheme="https://lesama.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://lesama.github.io/tags/web/"/>
    
      <category term="网页" scheme="https://lesama.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
      <category term="jq" scheme="https://lesama.github.io/tags/jq/"/>
    
      <category term="html" scheme="https://lesama.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-03</title>
    <link href="https://lesama.github.io/JavaScript-03.html"/>
    <id>https://lesama.github.io/JavaScript-03.html</id>
    <published>2019-02-11T13:46:30.000Z</published>
    <updated>2019-03-12T10:40:43.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Math方法"><a href="#Math方法" class="headerlink" title="Math方法"></a>Math方法</h1><ul><li>sqrt：开方</li><li>abs：绝对值</li><li>PI：π</li><li>pow(x,y) ：x的y次方</li><li>round：取整（四舍五入）</li><li>random：随机数0~1</li><li>min（x，y，z）：从x，y，z中取最小值</li><li>max（x，y，z）：从x，y，z中取最大值</li><li>ceil：向上取整</li><li>floor：向下取整</li></ul><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.round(Math.random*100) //随机生成1~100的随机数</span><br></pre></td></tr></table></figure><h1 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h1><h2 id="Date方法"><a href="#Date方法" class="headerlink" title="Date方法"></a>Date方法</h2><p>new Date()：新建日期对象</p><ul><li><p>getFullYear：获取年份</p></li><li><p>getMonth：获取月份</p></li><li><p>getDay：获取日</p></li><li><p>getHours：获取时</p></li><li><p>getMinutes：获取分</p></li><li><p>getSeconds：获取秒</p></li></ul><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var today = new Date();</span><br><span class="line">var year = today.getFullYear();</span><br><span class="line">var month = today.getMonth()+1;</span><br><span class="line">var day = today.getDay();</span><br><span class="line">var hour = today.getHours();</span><br><span class="line">var minute = today.getMinutes();</span><br><span class="line"> var second = today.getSeconds();</span><br><span class="line">console.log(year+&apos;年&apos;+month+&apos;月&apos;+day+&apos;日&apos;+hour+&apos;:&apos;+minute+&apos;:&apos;+second);</span><br></pre></td></tr></table></figure><h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><p>时间戳：格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var timestamp = Date.new();//新建</span><br><span class="line"></span><br><span class="line">console.log(&quot;timestamp:&quot;timestamp);</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>函数是通常是把一系列重复使用的操作封装成一个方法，方便调用</p><p>函数分类：有名函数，匿名函数</p><h2 id="定义有名函数"><a href="#定义有名函数" class="headerlink" title="定义有名函数:"></a>定义有名函数:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function 函数名()&#123;</span><br><span class="line">//代码块</span><br><span class="line">console.log(&quot;OK&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var result=function 函数名()&#123;</span><br><span class="line">//代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名();</span><br></pre></td></tr></table></figure><h2 id="匿名函数："><a href="#匿名函数：" class="headerlink" title="匿名函数："></a>匿名函数：</h2><p>​    匿名函数一般充当事件函数</p><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var box = document.getElementById(&apos;box&apos;);</span><br><span class="line"></span><br><span class="line">box.onclick = function()&#123;</span><br><span class="line"></span><br><span class="line">console.log(123);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="自调用函数："><a href="#自调用函数：" class="headerlink" title="自调用函数："></a>自调用函数：</h2><p>自调用函数是在函数表达式写完后自动执行</p><p>其函数表达式前面加上 (,),+,-,!,~ </p><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line"> console.log(&quot;ok&quot;);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">+function()&#123;</span><br><span class="line"> console.log(&quot;ok&quot;);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>函数参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function sum()&#123;</span><br><span class="line"> var a = x+y+z；   //需要传入3个参数x，y，z</span><br><span class="line">console.log(argments);  //argments为接收的不定参数</span><br><span class="line">console.log(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><ul><li><p>setTimeout：设置定时器</p></li><li><p>clearTimeout：清除定时器</p></li><li><p>setInterval：设置定时器</p></li><li><p>clearInterval：清除定时器</p></li></ul><p>注：清除定时器的时候，要给定时器加个名字</p><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var btn = document.getElementsByTagName(&quot;button&quot;)[0];</span><br><span class="line">    //1000毫秒=1秒</span><br><span class="line"></span><br><span class="line">setTimeout(function () &#123;</span><br><span class="line"></span><br><span class="line">        console.log(123)</span><br><span class="line"></span><br><span class="line">    &#125;,1000);</span><br><span class="line"></span><br><span class="line">var timer = setInterval(function () &#123;</span><br><span class="line">    console.log(123)</span><br><span class="line">&#125;,1000);</span><br><span class="line"></span><br><span class="line">btn.onclick = function () &#123;</span><br><span class="line">    clearInterval(timer);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="setTimeout与setInterval的区别"><a href="#setTimeout与setInterval的区别" class="headerlink" title="setTimeout与setInterval的区别"></a>setTimeout与setInterval的区别</h2><p> setTimeout执行一次，setInterval一直循环执行，直到清除定时器</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Math方法&quot;&gt;&lt;a href=&quot;#Math方法&quot; class=&quot;headerlink&quot; title=&quot;Math方法&quot;&gt;&lt;/a&gt;Math方法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;sqrt：开方&lt;/li&gt;
&lt;li&gt;abs：绝对值&lt;/li&gt;
&lt;li&gt;PI：π&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="web" scheme="https://lesama.github.io/categories/web/"/>
    
    
      <category term="js" scheme="https://lesama.github.io/tags/js/"/>
    
      <category term="JavaScript" scheme="https://lesama.github.io/tags/JavaScript/"/>
    
      <category term="web" scheme="https://lesama.github.io/tags/web/"/>
    
      <category term="网页" scheme="https://lesama.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-02</title>
    <link href="https://lesama.github.io/JavaScript-02.html"/>
    <id>https://lesama.github.io/JavaScript-02.html</id>
    <published>2019-02-08T16:06:35.000Z</published>
    <updated>2019-03-12T10:40:48.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript操作符"><a href="#JavaScript操作符" class="headerlink" title="JavaScript操作符"></a>JavaScript操作符</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ol><li><p>关系运算符  &gt; &lt; &gt;= &lt;= != == === !==</p><p>​            ==:比较数据  不比较类型</p><p>​            ===：比数据比类型</p><p> . 逻辑运算符  &amp;&amp;逻辑与  || 逻辑或  ！逻辑非    </p></li><li><p>算术运算符  + － <em>  /  %  ++  －－ +=  </em>=  /=</p></li><li><p>赋值运算符  =</p></li><li><p>条件运算符  （三目运算符 三元运算符）？：</p><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p><strong>typeof</strong><br>判断变量的数据类型  两种写法<br> typeof 变量名<br> typeof （变量名）</p><p> number      —如果这个字值是数值<br> string         —如果这个字值是字符串<br> undefined  —如果这个字值是未定义<br> boolean     —如果这个字值是布尔值<br> object    —如果这个字值是对象或null<br> function     —如果这个字值是函数</p></li></ol><h1 id="JavaScript控制流程语句"><a href="#JavaScript控制流程语句" class="headerlink" title="JavaScript控制流程语句"></a>JavaScript控制流程语句</h1><ul><li><p>选择结构</p><p>​        if…else</p><p>​        switch…case(可以使用字符串)</p></li><li><p>循环结构</p><p>​        for</p><p>​        do…while</p><p>​        while</p><p>​        for  in   for(var i in 数组名) i 代表数组下标，只能放在数组中</p></li><li><p>跳转语句</p><p>​        break</p><p>​        continue</p></li></ul><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><h2 id="字符串的常用方法"><a href="#字符串的常用方法" class="headerlink" title="字符串的常用方法"></a>字符串的常用方法</h2><ul><li><p>lenght; 长度</p></li><li><p>[]/get（）;下标</p></li><li><p>Replace（）;替换</p></li><li><p>Split（）; 分割</p></li><li><p>Slice（）;切割</p></li><li><p>Substring（）;截取</p></li><li><p>toUpperCase（）;转大写</p></li><li><p>toLowerCase（）;转小写</p></li><li><p>isnan（）;—判断是否为数值类型  —true  不是数值   —false  是数值</p></li><li><p>parseint（）; 转数值类型</p></li><li><p>parsefloat（）; 转小数类型</p></li><li><p>字符串函数</p><p>​    indexof（””）</p><p>​    字符串.indexof（”a”）; —返回a字符 在字符串中的下标 从0开始，如果未找到返回-1</p></li></ul><h2 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h2><ul><li>length;长度</li><li>[];下标</li><li>push（）;右加</li><li>Unshift（）;左家</li><li>Pop（）;右删</li><li>Shift（）;左删</li><li>Concat（）;连接</li><li>Reverse（）;反向</li><li>Sort（）;排序</li><li>join（）;拼接</li><li>splice（）;替换</li><li>slice（）;切片</li><li>indexOf（）;索引</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript操作符&quot;&gt;&lt;a href=&quot;#JavaScript操作符&quot; class=&quot;headerlink&quot; title=&quot;JavaScript操作符&quot;&gt;&lt;/a&gt;JavaScript操作符&lt;/h1&gt;&lt;h2 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; c
      
    
    </summary>
    
      <category term="web" scheme="https://lesama.github.io/categories/web/"/>
    
    
      <category term="js" scheme="https://lesama.github.io/tags/js/"/>
    
      <category term="JavaScript" scheme="https://lesama.github.io/tags/JavaScript/"/>
    
      <category term="web" scheme="https://lesama.github.io/tags/web/"/>
    
      <category term="网页" scheme="https://lesama.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-02</title>
    <link href="https://lesama.github.io/JavaScript-01.html"/>
    <id>https://lesama.github.io/JavaScript-01.html</id>
    <published>2019-01-21T16:06:35.000Z</published>
    <updated>2019-03-12T10:59:06.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><ul><li><p>javaScript简称 —- js</p></li><li><p>网页三剑客：</p><p>​    html、css、js</p></li><li><p>JavaScript简介：</p><pre><code>  1995年由 netspace和sun合作制作</code></pre><p>  一种基于对象（object）和事件驱动并具有相对安全性的客户端脚本语言</p></li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>是一种可以和html标记语言混合使用的脚本语言，不能单独运行</li><li>ECMA（欧洲计算机商协会）的标准，支持大部分浏览器</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>严格区分大小写</li><li>每一行完整的语句后都要加分号</li><li>变量名不能使用关键字</li><li>代码要注意缩进，保持代码可读性</li></ol><h1 id="2-如何使用JavaScript"><a href="#2-如何使用JavaScript" class="headerlink" title="2. 如何使用JavaScript"></a>2. 如何使用JavaScript</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">1.嵌套 一般放在head中</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">//代码</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2.引用外部js文件</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js文件地址"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">3.行级</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"javascript:alert('123')"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">```</span><br></pre></td></tr></table></figure><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><ul><li>getElementById id-通过ID获取元素</li><li>getElementsByClassName class-通过class名字获取</li><li>getElementsByTagName tagName-通过标签名获取元素</li><li>getElementsByName name-通过属性名获取元素，一般用于input</li><li>selector-通过CSS选择器获取一个</li><li>selectorAll-通过CSS选择器获取所有</li></ul><h2 id="简单事件"><a href="#简单事件" class="headerlink" title="简单事件"></a>简单事件</h2><p><strong>鼠标事件：</strong></p><ul><li>onclick —单击事件</li><li>ondbclick —双击事件</li><li>onmouseenter —鼠标划入</li><li>onmouseleave —鼠标划出</li><li>onresize —窗口变化</li><li>onchange —改变下拉框</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型（6种 5种简单数据类型，一种复杂数据类型）弱类型<br><strong>弱类型</strong></p><ol><li>number      数值型 不区分整数和浮点数，没有限制长度</li><li>string      字符串</li><li>undefined   未定义  专门用来确定一个变量是否有初始值<br> . null          空      用于表明某个变量的值为空</li><li>boolean     布尔型</li><li>还有一种复杂性数据类型  object  对象</li></ol><h2 id="属性操作-合法属性及自定义属性-增删改查"><a href="#属性操作-合法属性及自定义属性-增删改查" class="headerlink" title="属性操作 - 合法属性及自定义属性(增删改查)"></a>属性操作 - 合法属性及自定义属性(增删改查)</h2><ul><li>变量名.classname=’box’; 增（无则增有则改）</li><li>console.log(变量名.className); 查</li><li>变量名.reremoveAttribute(‘属性名’) 删</li><li>classname/removeAttribute</li><li>setAttribute 增加效果（无则增有则改）</li><li>hasAttritube 查找</li><li>removeAttribute 删除效果</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;javaScript简称 —- js&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网页三剑客：&lt;/p&gt;
&lt;p&gt;​
      
    
    </summary>
    
      <category term="web" scheme="https://lesama.github.io/categories/web/"/>
    
    
      <category term="js" scheme="https://lesama.github.io/tags/js/"/>
    
      <category term="JavaScript" scheme="https://lesama.github.io/tags/JavaScript/"/>
    
      <category term="web" scheme="https://lesama.github.io/tags/web/"/>
    
      <category term="网页" scheme="https://lesama.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>CSS进阶</title>
    <link href="https://lesama.github.io/css-02.html"/>
    <id>https://lesama.github.io/css-02.html</id>
    <published>2019-01-19T06:25:00.000Z</published>
    <updated>2019-03-12T10:41:06.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-盒子模型"><a href="#1-盒子模型" class="headerlink" title="1. 盒子模型"></a>1. 盒子模型</h1><pre><code>可以把页面上的元素看成一个盒子盒子模型由内容、内边距、边框、外边距构成padding - 内边距margin - 外边距 ☆border - 边框content(width、height) - 内容border-top: 上边框border-right: 右边框border-left: 左边框border-bottom: 下边框 double 双线dotted 点dashed 虚线solid 实线padding、margin - 参数 上右下左 顺时针px 像素</code></pre><h1 id="2-Reset-重置"><a href="#2-Reset-重置" class="headerlink" title="2. Reset 重置"></a>2. Reset 重置</h1><pre><code>Reset - 重置CSS    浏览器解析标签的时候本身自带一些样式，有时会导致我们自身写的样式出现的效果不一致    每个公司会根据自己的业务需求写一套属于自己的ResetCss    以下是一个通用的RESETCSS：        https://meyerweb.com/eric/tools/css/reset/</code></pre><h1 id="3-浮动"><a href="#3-浮动" class="headerlink" title="3. 浮动"></a>3. 浮动</h1><pre><code>float:left 向左浮动float:right 向右浮动使用浮动须知：    - 要先改成内联块状    - 脱离文档流    - 可能会造成高度塌陷三种解决方法：    1、overflow:hidden;不推荐只适用于纯浮动的页面布局    2、加一个空的&lt;div&gt;&lt;/div&gt;;也不推荐    3、.clearfix::{            display:block;            clear:both;            content:&#39;&#39;; 空字符        } 推荐 比较常用</code></pre><h1 id="4-定位"><a href="#4-定位" class="headerlink" title="4. 定位"></a>4. 定位</h1><pre><code>作用：对元素进行精确的定位三种形式    1、绝对定位:position:absolute;        绝对定位是脱离文档流的    2、相对定位:posttion:relative;    3、固定定位:position:fixed;        固定定位与相对定位不脱离文档流，是相对于自己的一个偏移父相（对）子绝（对）：保持页面的布局完整 </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-盒子模型&quot;&gt;&lt;a href=&quot;#1-盒子模型&quot; class=&quot;headerlink&quot; title=&quot;1. 盒子模型&quot;&gt;&lt;/a&gt;1. 盒子模型&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;可以把页面上的元素看成一个盒子
盒子模型由内容、内边距、边框、外边距构成
padding
      
    
    </summary>
    
      <category term="web" scheme="https://lesama.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://lesama.github.io/tags/web/"/>
    
      <category term="网页" scheme="https://lesama.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
      <category term="html" scheme="https://lesama.github.io/tags/html/"/>
    
      <category term="css" scheme="https://lesama.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS基础</title>
    <link href="https://lesama.github.io/css-01.html"/>
    <id>https://lesama.github.io/css-01.html</id>
    <published>2019-01-18T01:34:36.000Z</published>
    <updated>2019-03-12T10:41:12.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-CSS的基本使用"><a href="#1-CSS的基本使用" class="headerlink" title="1. CSS的基本使用"></a>1. CSS的基本使用</h1><h2 id="行内样式："><a href="#行内样式：" class="headerlink" title="行内样式："></a>行内样式：</h2><p>行内样式可直接写在现有的HTML标签里,比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:red;font-size:12px;"</span>&gt;</span>233333333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h2><p>内部样式把CSS样式直接写在当前页面的头部标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"tsxt/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">样式规则：选择器&#123;属性：属性值&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h2><p>外部样式是把CSS样式写在外部CSS文件中，通过<link>嵌在页面的头部标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"要引入的网址"</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2. 选择器"></a>2. 选择器</h1><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><pre><code>标签选择器 标签名类选择器   .ID选择器   #</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre><code>后代 .div span子代 .div&gt;span兄弟 .div~span 向下执行相同的相邻 .div+span 全选择器 *div,span{ }  可以节省重复代码伪类选择器 link 未访问的           visited 访问后的           hover 划过           active 激活状态的</code></pre><h1 id="3-字体-font属性"><a href="#3-字体-font属性" class="headerlink" title="3. 字体 font属性"></a>3. 字体 font属性</h1><h2 id="常见的文本样式："><a href="#常见的文本样式：" class="headerlink" title="常见的文本样式："></a>常见的文本样式：</h2><pre><code>color：字体颜色font-size：字体大小font-family：字体类型&lt;strong&gt;：字体加粗font-weight：bold  字体加粗&lt;em&gt; 斜体font-style：italic斜体   normal（正常）div--层标签text-decoration：underline(有下划线) none(无下划线)设置下划线             line-through:删除线text-align：center  文本居中对齐方式   left：对左   right：对右line-height：行间距letter-spacing:字符间距border-radius:  pxtext-indent: 2em首行缩进Div+css布局方式height+line-height文字上下居中test-align：center文字水平居中</code></pre><h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><pre><code>background-color:背景颜色background-image:url(图片路径);background-repeat:no-repeat;图片不重复background-repeat:repeat-x(向x轴延伸)background-repeat:repeat-y(向y轴延伸)background-position:图片偏移;dispaly:inline;  转内联dispaly:block;  转块状dispaly:inline-block; 转内联块状</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-CSS的基本使用&quot;&gt;&lt;a href=&quot;#1-CSS的基本使用&quot; class=&quot;headerlink&quot; title=&quot;1. CSS的基本使用&quot;&gt;&lt;/a&gt;1. CSS的基本使用&lt;/h1&gt;&lt;h2 id=&quot;行内样式：&quot;&gt;&lt;a href=&quot;#行内样式：&quot; class=&quot;
      
    
    </summary>
    
      <category term="web" scheme="https://lesama.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://lesama.github.io/tags/web/"/>
    
      <category term="网页" scheme="https://lesama.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
      <category term="html" scheme="https://lesama.github.io/tags/html/"/>
    
      <category term="css" scheme="https://lesama.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>HTML介绍及常用标签</title>
    <link href="https://lesama.github.io/html.html"/>
    <id>https://lesama.github.io/html.html</id>
    <published>2019-01-17T09:39:19.000Z</published>
    <updated>2019-03-12T10:40:58.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-HTML简介"><a href="#1-HTML简介" class="headerlink" title="1. HTML简介"></a>1. HTML简介</h1><h2 id="超文本标记语言"><a href="#超文本标记语言" class="headerlink" title="超文本标记语言"></a>超文本标记语言</h2><p>Hyper(超)Text(文本)MarKup(标记)Language(语言)</p><p>HTML是一门标记语言，标记语言就是靠标签组成，学习HTML就是学习标签的使用</p><p>HTML代码在执行过程中是从上往下执行的</p><h2 id="什么是标签"><a href="#什么是标签" class="headerlink" title="什么是标签"></a>什么是标签</h2><ol><li>由尖括号包裹单词构成，所以标签不可能以数字开头</li><li>不区分大小写，推荐小写</li><li>标签可以嵌套，不能交叉嵌套</li></ol><h1 id="2-常用标签"><a href="#2-常用标签" class="headerlink" title="2. 常用标签"></a>2. 常用标签</h1><h2 id="初始标签"><a href="#初始标签" class="headerlink" title="初始标签"></a>初始标签</h2><ol><li><p>title:标题标签</p></li><li><p>head:头部标签</p></li><li><p>​body:主体标签</p></li></ol><h2 id="常见标签"><a href="#常见标签" class="headerlink" title="常见标签"></a>常见标签</h2><ul><li>h1-h6:文章标题</li><li>p:段落标签</li><li>span:用来组合文档中的行内元素</li><li>strong/b:加粗</li><li>i:斜体</li><li>s:删除线</li></ul><h2 id="块状标签和内联标签-行内标签"><a href="#块状标签和内联标签-行内标签" class="headerlink" title="块状标签和内联标签(行内标签)"></a>块状标签和内联标签(行内标签)</h2><ul><li><p>块状：霸道 独占一行，前后自动换</p></li><li><p>行，可以设置宽高</p></li><li><p>内联(行内)：在一行直到满了为止换行</p></li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><p>有序列表：ol li</p></li><li><p>无序列表：ul li</p></li><li><p>定义列表：dl dt dd</p></li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>src = 图片</p><p>../ 相对路径</p><p>直接从电脑的是绝对路径</p><h2 id="超链接-a标签"><a href="#超链接-a标签" class="headerlink" title="超链接(a标签)"></a>超链接(a标签)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">" "</span> <span class="attr">target</span>=<span class="string">" "</span> <span class="attr">title</span>=<span class="string">" "</span> &gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>href = 跳转的路径</li><li>target 打开方式，默认 self 在本身打开，blank 在新的空白页面打开</li><li>title 鼠标下方提示文本</li></ul><h2 id="特殊标签"><a href="#特殊标签" class="headerlink" title="特殊标签"></a>特殊标签</h2><ul><li>&amp;nbsp 空格</li><li>&amp;lt 小于</li><li>&amp;gt 大于</li><li>&amp;emsp 字符宽</li></ul><h2 id="表格-table"><a href="#表格-table" class="headerlink" title="表格(table)"></a>表格(table)</h2><ul><li>table:表格标签</li><li>thead:表格头部</li><li>tbody:表格主题</li><li>tfoot:表格脚部</li><li>tr:行</li><li>td:列</li><li>colspan:合并列</li><li>rowspan:合并行</li></ul><h2 id="表单-from"><a href="#表单-from" class="headerlink" title="表单(from)"></a>表单(from)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span> <span class="attr">action</span>=<span class="string">" "</span> <span class="attr">method</span>=<span class="string">" "</span> &gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>action:提交到的路径</p></li><li><p>method:提交的方式</p><p>​    默认值是 get  ，会在地址栏显示安全性较差，对于提交的内容有长度限制</p><p>​    post 不会显示在地址栏相对安全，对于提交的内容没有长度限制</p></li></ul><h2 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h2><ul><li><p>文 本 框:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">maxlength</span>=<span class="string">"可输入的最大长度"</span> <span class="attr">size</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>提交按钮:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>普通按钮:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"普通按钮"</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>密 码 框:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>重置按钮:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置"</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>单选按钮:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> /&gt;</span>name必须设置成一样的,表示是一组单选按钮 checked="checked"默认选中</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>文件上传域:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>多选按钮:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span>name可以设置成不一样的,要求设置成一样的</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>下 拉 框:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>多行文本域:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>  <span class="attr">rows</span>=<span class="string">"行"</span> <span class="attr">cols</span>=<span class="string">"列"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>隐 藏 域:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>图片按钮:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">src</span>= <span class="string">""</span> <span class="attr">onmouseover</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3. 扩展"></a>3. 扩展</h1><p>在输入框中输入要搜索的信息，点击”百度一下“则跳转到百度对应的搜索信息，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https://www.baidu.com/s"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">百度搜索 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入搜索内容"</span> <span class="attr">name</span>=<span class="string">'wd'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">tpye</span>=<span class="string">'submit'</span> <span class="attr">name</span>=<span class="string">'百度一下'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-HTML简介&quot;&gt;&lt;a href=&quot;#1-HTML简介&quot; class=&quot;headerlink&quot; title=&quot;1. HTML简介&quot;&gt;&lt;/a&gt;1. HTML简介&lt;/h1&gt;&lt;h2 id=&quot;超文本标记语言&quot;&gt;&lt;a href=&quot;#超文本标记语言&quot; class=&quot;head
      
    
    </summary>
    
      <category term="web" scheme="https://lesama.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://lesama.github.io/tags/web/"/>
    
      <category term="网页" scheme="https://lesama.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
      <category term="html" scheme="https://lesama.github.io/tags/html/"/>
    
  </entry>
  
</feed>
