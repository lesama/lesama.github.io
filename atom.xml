<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>嘿!楽</title>
  
  <subtitle>这里是楽的个人博客~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lesama.github.io/"/>
  <updated>2019-03-04T13:30:35.128Z</updated>
  <id>https://lesama.github.io/</id>
  
  <author>
    <name>楽</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习术语</title>
    <link href="https://lesama.github.io/ML-introduce.html"/>
    <id>https://lesama.github.io/ML-introduce.html</id>
    <published>2019-03-02T08:51:29.000Z</published>
    <updated>2019-03-04T13:30:35.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习术语"><a href="#机器学习术语" class="headerlink" title="机器学习术语"></a>机器学习术语</h1><p>机器学习正是这样一门学科，它致力于研究如何通过计算的手段，利用经验来改善系统自身的性能.在计算机系统中，“经验”通常以“数据”形式存在，因此，机器学习所研究的主要内容，是关于在计算机上从数据中产生“模 型”（model)的算法，即“学习算法”（learning algorithm).有了学习算法，我们把经验数据提供给它，它就能基于这些数据产生模型；在面对新的情况时(例 如看到一个没剖开的西瓜)，模型会给我们提供相应的判断(例如好瓜).如果说计算机科学是研究关于“算法”的学问，那么类似的，可以说机器学习是研究关于<code>“学习算法”</code>的学问。</p><h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><div class="table-container"><table><thead><tr><th>编号</th><th>色泽</th><th>根蒂</th><th>敲声</th><th>好瓜</th></tr></thead><tbody><tr><td>1</td><td>青绿</td><td>蜷缩</td><td>浊响</td><td>是</td></tr><tr><td>2</td><td>乌黑</td><td>蜷缩</td><td>浊响</td><td>是</td></tr><tr><td>3</td><td>青绿</td><td>硬挺</td><td>清脆</td><td>否</td></tr><tr><td>4</td><td>乌黑</td><td>稍蜷</td><td>沉闷</td><td>否</td></tr></tbody></table></div><h3 id="数据集（data-set）"><a href="#数据集（data-set）" class="headerlink" title="数据集（data set）"></a><strong>数据集（data set）</strong></h3><p>这组记录的集合称为一个<code>数据集（data set）</code></p><h3 id="示例”（instance-、样-本”（sample"><a href="#示例”（instance-、样-本”（sample" class="headerlink" title="示例”（instance)、样 本”（sample)"></a><strong>示例”（instance)、样 本”（sample)</strong></h3><p>其中每条记录是关于一个事件或对象(这里是一个西瓜)的描述，称为一个<code>“示例”（instance</code>)或“<code>样 本”（sample)</code>.有时整个数据集亦称一个“样本”，因为它可看作对样本空间的一个采样; 通过上下文可判断出“样本”是指单个示例还是数据集。</p><h3 id="属性（attribute）、特征（feature）"><a href="#属性（attribute）、特征（feature）" class="headerlink" title="属性（attribute）、特征（feature）"></a><strong>属性（attribute）、特征（feature）</strong></h3><p>反映事件或对象在某方面的表现或性质的事项，例如“色泽” “根蒂”“敲声”，称为<code>“属性”（attribute)</code>或<code>“特征”（feature).</code></p><h3 id="属性值（attribute-value）"><a href="#属性值（attribute-value）" class="headerlink" title="属性值（attribute value）"></a><strong>属性值（attribute value）</strong></h3><p>属性上的取值，例如“青绿”“乌黑”，称为“<code>属性值”（attribute value)</code>“.</p><h3 id="“属性空间”（attribute-space-、“样本空间”（sample-space-或“输入空间”"><a href="#“属性空间”（attribute-space-、“样本空间”（sample-space-或“输入空间”" class="headerlink" title="“属性空间”（attribute space)、“样本空间”（sample space)或“输入空间”"></a><strong>“属性空间”（attribute space)、“样本空间”（sample space)或“输入空间”</strong></h3><p>属性合成的空间称为<code>“属性空间”（attribute space)、“样本空间”（sample space)或“输入空间</code>”</p><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/article/29093845.jpg" alt="属性空间"></p><h3 id="特征向量（feature-vector）"><a href="#特征向量（feature-vector）" class="headerlink" title="特征向量（feature vector）"></a><strong>特征向量（feature vector）</strong></h3><p>例如我们把“色泽” “根蒂” “敲声”作为三个坐标轴，则它们张成 一个用于描述西瓜的三维空间，每个西瓜都可在这个空间中找到自己的坐标位 置.由于空间中的每个点对应一个坐标向量，因此我们也把一个示例称为一个 <code>“特征向量”（feature vector)</code>.</p><h3 id="维数（dimensionality）"><a href="#维数（dimensionality）" class="headerlink" title="维数（dimensionality）"></a><strong>维数（dimensionality）</strong></h3><p>一般地，令<em>D</em> = {x1x1 ,x2x2, …，xmxm}表示包含m个示例的数据集，每个示例由d个属性描述(例如上面的西瓜数据使用了3个属性)，则每个示例 xixi =(xi1xi1;xi2xi2;…x_id）是d维样本空间<em>X</em> 中的一个向量，xi∈xi∈<em>X</em> ,其中xijxij 是xixi在第j个属性上的取值(例如上述第3个西瓜在第2个属性上的值是“硬挺”），<em>d</em> 称为样本xixi的 <code>“维数”（dimensionality).</code></p><h3 id="学习、训练、训练数据、训练样本、训练集、假设、真相、真实、学习器"><a href="#学习、训练、训练数据、训练样本、训练集、假设、真相、真实、学习器" class="headerlink" title="学习、训练、训练数据、训练样本、训练集、假设、真相、真实、学习器"></a><strong>学习、训练、训练数据、训练样本、训练集、假设、真相、真实、学习器</strong></h3><p>从数据中学得模型的过程称为<code>“学习”（learning)</code>或<code>“训练”（training),</code> 这个过程通过执行某个学习算法来完成.训练过程中使用的数据称为“<code>训练 数据”（training data)</code>，其中每个样本称为一个<code>“训练样本”（training sample),</code> 训练样本组成的集合称为<code>“训练集”（training set)</code>.学得模型对应了关于数据的某种潜在的规律，因此亦称<code>假设”（hypothesis)</code>;这种潜在规律自身，则称为<code>“真相”</code>或<code>“真实” (ground-tmth),</code>学习过程就是为了找出或逼近真相.有时将模型称为<code>“学习器”（learner)</code>,可看作学习算法在给定数据和参数空间上的实例化.</p><h3 id="“训练示例”-（training-instance-、“训练例”"><a href="#“训练示例”-（training-instance-、“训练例”" class="headerlink" title="“训练示例” （training instance)、“训练例”"></a><strong>“训练示例” （training instance)、“训练例”</strong></h3><p>训练样本亦称<code>“训练示例” （training instance)或“训练例”</code>.</p><h3 id="预测、标记、样例、标记空间、输出空间"><a href="#预测、标记、样例、标记空间、输出空间" class="headerlink" title="预测、标记、样例、标记空间、输出空间"></a><strong>预测、标记、样例、标记空间、输出空间</strong></h3><p>学习算法通常有参数需设置，使用不同的参数值 和(或)训练数据，将产生不同的结果.</p><p>如果希望学得一个能帮助我们判断没剖开的是不是“好瓜”的模型，仅有前面的示例数据显然是不够的.要建立这样的关于<code>“预测”（prediction)</code>的模型，我们需获得训练样本的“结果”信息，例如“((色泽=青绿;根蒂=蜷缩; 敲声=浊响)，好瓜这里关于示例结果的信息，例如“好瓜”，称为<code>“标记”（label)</code>;拥有了标记信息的示例，则称为<code>“样例”（example)</code>.—般地，用(xixi，yiyi）表示第i个样例，其中队yi∈yi∈ <em> y </em> 是示例xixi的标记，<em> y </em> 是所有标记的集合, 亦称<code>“标记空间”（label space)</code>或<code>“输出空间”.</code></p><blockquote><p>将“label”译为“标记”而非“标签”，是考虑到英文中“label”既可用作名词、也可用作动词.若将标记看作对象本身的一部分，则“样例”有时也称为“样本”.</p></blockquote><h3 id="分类、回归、二分类、正类、反类、多分类"><a href="#分类、回归、二分类、正类、反类、多分类" class="headerlink" title="分类、回归、二分类、正类、反类、多分类"></a><strong>分类、回归、二分类、正类、反类、多分类</strong></h3><p>若我们欲预测的是离散值，例如“好瓜”“坏瓜”，此类学习任务称为<code>“分类”（classification)</code>;若欲预测的是连续值，例如西瓜成熟度0.95、0.37, 此类学习任务称为<code>“回归”（regression).</code>对只涉及两个类别的<code>“二分类”（binary classification)</code>任务，通常称其中一个类为<code>“正类”（positive class)</code>, 另一个类为<code>“反类&#39;(negative class)</code>;涉及多个类别时，则称为<code>“多分类”（multi-class classification)</code>任务.一般地，预测任务是希望通过对训练集{(x1,y1x1,y1),(x2,y2x2,y2)，…，(xm,ymxm,ym)}进行学习，建立一个从输入空间 <em> x </em> 到输出空间yy的映射ff:X⟼YX⟼Y 对二分类任务，通常令yy = {-1, +1}或{0, 1};对多分类任务，|yy|&gt; 2;对回归任务,yy = RR，RR为实数集.</p><blockquote><p>学得模型后，使用其进行预测的过程称为“测试”（testing)，被预测的样本 称为“测试样本”（testing sample).例如在学得ff后，对测试例xx可得到其预 测标记y=f(x)y=f(x)</p><p>亦称“测试示例”（testing instance） 或“测试例”</p></blockquote><h3 id="聚类、簇"><a href="#聚类、簇" class="headerlink" title="聚类、簇"></a><strong>聚类、簇</strong></h3><p>我们还可以对西瓜做<code>“聚类”（clustering)</code>，即将训练集中的西瓜分成若干 组，每组称为一个<code>“簇”（cluster)</code>;这些自动形成的簇可能对应一些潜在的概念划分，例如“浅色瓜”“深色瓜”，甚至“本地瓜”“外地瓜”.这样的学习过程有助于我们了解数据内在的规律，能为吏深入地分析数据建立基础.需说明 的是，在聚类学习中，“浅色瓜” “本地瓜”这样的概念我们事先是不知道的， 而且学习过程中使用的训练样本通常不拥有标记信息.</p><h3 id="监督学习、无监督学习"><a href="#监督学习、无监督学习" class="headerlink" title="监督学习、无监督学习"></a><strong>监督学习、无监督学习</strong></h3><p>根据训练数据是否拥有标记信息，学习任务可大致划分为两大类：<code>“监督学习 ”（supervised learning)</code>和<code>“无监督学习 ”（unsupervised learning)</code>,分类和回归是前者的代表，而聚类则是后者的代表.</p><blockquote><p>亦称“有导师学习”和“无导师学习”</p></blockquote><h3 id="泛化能力"><a href="#泛化能力" class="headerlink" title="泛化能力"></a><strong>泛化能力</strong></h3><p>需注意的是，机器学习的目标是使学得的模型能很好地适用于“新样本”, 而不是仅仅在训练样本上工作得很好；即便对聚类这样的无监督学习任务，我们也希望学得的簇划分能适用于没在训练集中出现的样本.学得模型适用于新样本的能力，称为<code>“泛化”（generalization)能力</code>.具有强泛化能力的模型能 很好地适用于整个样本空间.于是，尽管训练集通常只是样本空间的一个很小的采样，我们仍希望它能很好地反映出样本空间的特性，否则就很难期望在训练集上学得的模型能在整个样本空间上都工作得很好.通常假设样本空间中全 体样本服从一个未知“分布”（distribution)DD，我们获得的每个样本都是独立地从这个分布上采样获得的，即“独立同分布”（independent and identically distributed，简称i.i.d.i.i.d.). —般而言，训练样本越多，我们得到的关于DD的信息越多，这样就越有可能通过学习获得具有强泛化能力的模型.</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/article/57777708.jpg" alt="基本术语"></p><h2 id="假设空间"><a href="#假设空间" class="headerlink" title="假设空间"></a>假设空间</h2><p><code>归纳(induction)</code>与<code>演绎(deduction)</code>是科学推理的两大基本手段。前者是从特殊到一般的“泛<code>化”（generalization)过程</code>，即从具体的事实归结出一般性规律；后者则是从一般到特殊的<code>“特化”（specialization)过程</code>，即从基础原理推演 出具体状况.例如，在数学公理系统中，基于一组公理和推理规则推导出与之相洽的定理，这是演绎;而“从样例中学习”显然是一个归纳的过程，因此亦称 <code>“归纳学习 ”（inductive learning)</code> 。</p><p>归纳学习有<code>狭义与广义</code>之分，广义的归纳学习大体相当于从样例中学习， 而狭义的归纳学习则要求从训练数据中学得概念(concept)，因此亦称为<code>“概念 学习”或“概念形成”</code>.概念学习技术目前研究、应用都比较少，因为要学得 泛化性能好且语义明确的概念实在太困难了，现实常用的技术大多是产生“黑 箱”模型.然而，对概念学习有所了解，有助于理解机器学习的一些基础思想.</p><p>概念学习中最基本的是布尔概念学习，即对“是”“不是”这样的可表示 为0/1布尔值的目标概念的学习。</p><div class="table-container"><table><thead><tr><th>编号</th><th>色泽</th><th>根蒂</th><th>敲声</th><th>好瓜</th></tr></thead><tbody><tr><td>1</td><td>青绿</td><td>蜷缩</td><td>浊响</td><td>是</td></tr><tr><td>2</td><td>乌黑</td><td>蜷缩</td><td>浊响</td><td>是</td></tr><tr><td>3</td><td>青绿</td><td>硬挺</td><td>清脆</td><td>否</td></tr><tr><td>4</td><td>乌黑</td><td>稍蜷</td><td>沉闷</td><td>否</td></tr></tbody></table></div><blockquote><p>(色泽=?)⋀(根蒂=?)⋀(敲声=?)↔好瓜</p></blockquote><p>学习过程⟶⟶ 在所有假设(hypothesis)组成的空间中进行搜索的过程</p><p><code>目标:</code> 找到与训练集“匹配”(fit)的假设</p><p>以西瓜问题假设为例。色泽属性可取（青绿，乌黑，浅白，<em> ），根蒂属性可取（蜷缩，稍蜷，硬挺，</em> ），敲声属性可取（浊响，清脆，沉闷，<em> ），以及好瓜假设不存在(ϕϕ)。即西瓜问题的假设空间大小为（4 </em> 4 * 4 + 1=65）</p><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/article/55864726.jpg" alt="假设空间"></p><h3 id="版本空间"><a href="#版本空间" class="headerlink" title="版本空间"></a><strong>版本空间</strong></h3><p>可以有许多策略对这个假设空间进行搜索，例如自顶向下、从一般到特殊， 或是自底向上、从特殊到一般，搜索过程中可以不断删除与正例不一致的假设、和(或)与反例一致的假设.最终将会获得与训练集一致(即对所有训练样本 能够进行正确判断)的假设，这就是我们学得的结果.</p><p>需注意的是，现实问题中我们常面临很大的假设空间，但学习过程是基于有限样本训练集进行的，因此，可能有多个假设与训练集一致，即存在着一个与训练集一致的“假设集合”，我们称之为<code>“版本空间”（version space)</code></p><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/article/10121402.jpg" alt="版本空间"></p><h2 id="归纳偏好"><a href="#归纳偏好" class="headerlink" title="归纳偏好"></a>归纳偏好</h2><p>通过学习得到的模型对应了假设空间中的一个假设.于是，上面西瓜版本空间给我们带来一个麻烦：现在有三个与训练集一致的假设，但与它们对应的模型在面临新样本的时候，却会产生不同的输出.例如，对(色泽=青绿; 根蒂=蜷缩；敲声=沉闷)这个新收来的瓜，如果我们采用的是“好瓜⟷⟷(色泽=<em> )∧∧（根蒂=蜷缩）∧∧（敲声= </em> )”，那么将会把新瓜判断为好瓜，而如果釆用了另外两个假设，则判断的结果将不是好瓜.那么，应该采用哪一个模型(或 假设)呢？</p><p>若仅有以上的训练样本，则无法断定上述三个假设中哪一个“更好”. 然而，对于一个具体的学习算法而言，它必须要产生一个模型.这时，学习算法本身的“偏好”就会起到关键的作用.例如，若我们的算法喜欢“尽可能特殊”的模型，则它会选择“好瓜⟷⟷(色泽=<em> )∧∧(根蒂=蜷缩）∧∧(敲声=浊响)”； 但若我们的算法喜欢“尽可能一般”的模型，并且由于某种原因它更“相信” 根蒂，则它会选择“好瓜⟷⟷ (色泽=</em> )∧∧(根蒂=蜷缩)∧∧(敲声=* )” .机器学习算法在学习过程中对某种类型假设的偏好，称为“归纳偏好”（inductive bias), 或简称为“偏好’</p><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/article/15099462.jpg" alt="归纳偏好"></p><blockquote><p>“奥卡姆剃刀”（Occam’s razor)是一种常用的、自然科学研究中最基本的原则，即“若有多个假设与观察一致，则选最简单的那个”.如果采用这个原则，并且假设我们认为“更平滑”意味着“更简单”（例如曲线 A更易于描述，其方程式是y=−x2+6x+1y=−x2+6x+1，而曲线B则要复杂得多)</p></blockquote><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/article/52317858.jpg" alt="没有午餐定理"></p><p>No Free Lunch Theoren 定理 ， 没有免费的午餐定理，简称NFL定理， 由美国斯坦福大学的Wolpert和Macready教授提出。</p><blockquote><p>NFL定理：一个算法A若在某些问题上比另一个算法B好，必存在另一些问题B比A好</p></blockquote><p>为简单起见，假设样本空间XX和假设空间HH都是离散的.令P(h|X,La)P(h|X,La)代表算法LaLa基于训练数据X产生假设hh的概率，再令ff代表我们希望学习的真实目标函数LaLa的“训练集外误差”，即LaLa在训练集之外的所有样本上的误差为</p><p>$E_{ote}(La|X,f)=∑_{h}∑_{x∈χ−X}P(x)I(h(x)≠f(x))P(h|X,La)Eote(La|X,f)=∑h∑x∈χ−XP(x)I(h(x)≠f(x))P(h|X,La)$</p><p>其中I(⋅)I(⋅)是指示函数，若•为真则取值1,否则取值0.</p><p>考虑二分类问题，且真实目标函数可以是任何函数x⟼0,1x⟼0,1,函数空间为0,1|x|0,1|x|对所有可能的f按均匀分布对误差求和，有</p><p>$∑_{f}E_{ote}(La|X,f)=∑f∑h∑x∈χ−XP(x)I(h(x)≠f(x))P(h|X,La)∑fEote(La|X,f)=∑f∑h∑x∈χ−XP(x)I(h(x)≠f(x))P(h|X,La)​$</p><p>=∑x∈χ−XP(x)∑hP(h|X,La)∑fI(h(x)≠f(x))=∑x∈χ−XP(x)∑hP(h|X,La)∑fI(h(x)≠f(x))</p><p>=∑x∈χ−XP(x)∑hP(h|X,La)122|x|=∑x∈χ−XP(x)∑hP(h|X,La)122|x|</p><p>=122|x|∑x∈χ−XP(x)∑hP(h|X,La)=122|x|∑x∈χ−XP(x)∑hP(h|X,La)</p><p>=122|x|∑x∈χ−XP(x)⋅1=122|x|∑x∈χ−XP(x)⋅1$$</p><blockquote><p>上式显示出，总误差和学习算法无关！对于任意两个学习算法LaLa和LbLb,我们都有</p></blockquote><h4 id="∑fEote-La-X-f-∑fEote-Lb-X-f-∑fEote-La-X-f-∑fEote-Lb-X-f"><a href="#∑fEote-La-X-f-∑fEote-Lb-X-f-∑fEote-La-X-f-∑fEote-Lb-X-f" class="headerlink" title="∑fEote(La|X,f)=∑fEote(Lb|X,f)∑fEote(La|X,f)=∑fEote(Lb|X,f)"></a>∑fEote(La|X,f)=∑fEote(Lb|X,f)∑fEote(La|X,f)=∑fEote(Lb|X,f)</h4><p>也就是说，无论学习算法LaLa多聪明、学习算法LbLb多笨拙，它们的期望性能竟然相同！这就是“没有免费的午餐”定理（No FYee Lunch Theorem,简称NFL定理）[Wolpert，1996; Wolpert and Macready, 1995].</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>NFL定理有一个重要前提：所有“问题”出现的机会相同、或所有问题同等重要.但实际情形并不是这样.很多时候，我们只关注自己正在试图解决的问题(例如某个具体应用任务)，希望为它找到一个解决方案， 至于这个解决方案在别的问题、甚至在相似的问题上是否为好方案，我们并不关心.例如，为了快速从A地到达B地，如果我们正在考虑的A地是南京鼓楼、B地是南京新街口，那么“骑自行车”是很好的解决方案；这个方案对A 地是南京鼓楼、B地是北京新街口的情形显然很糟糕，但我们对此并不关心.</p><p>NFL定理最重要的寓意，是让我们清楚地认识到，脱离具体问题，空泛地谈论“什么学习算法更好”毫无意义，因为若考虑所有潜在的问题，则所有学习算法都一样好.要谈论算法的相对优劣，必须要针对具体的学习问题；在某些问题上表现好的学习算法，在另一些问题上却可能不尽如人意，学习算法自身的归纳偏好与问题是否相配，往往会起到决定性的作用.</p><h2 id="经验误差和过拟合"><a href="#经验误差和过拟合" class="headerlink" title="经验误差和过拟合"></a>经验误差和过拟合</h2><p>通常我们把分类错误的样本数占样本总数的比例称为<code>“错误率”（error rate)</code>,即如果在m个样本中有a个样本分类错误，则错误率EE=a/m;相应的, l-a/m称为<code>“精度” (accuracy)</code>,即“精度=1-错误率”.更一般地,我们把学习器的实际预测输出与样本的真实输出之间的差异称为<code>“误差”（error)</code>, 学习器在训练集上的误差称为<code>“训练误差”（training error)</code>或<code>“经验误差” (empirical error)</code>,在新样本上的误差称为<code>“泛化误差”（generalization error)</code>.显然，我们希望得到泛化误差小的学习器.然而，我们事先并不知道新样本是什么样，实际能做的是努力使经验误差最小化.在很多情况下，我们可以学得一个经验误差很小、在训练集上表现很好的学习器，例如甚至对所有训练 样本都分类正确，即分类错误率为零，分类精度为100%,但这是不是我们想要的学习器呢？遗憾的是，这样的学习器在多数情况下都不好.</p><p>我们实际希望的，是在新样本上能表现得很好的学习器.为了达到这个目的，应该从训练样本中尽可能学出适用于所有潜在样本的“普遍规律”，这样才能在遇到新样本时做出正确的判别.然而,当学习器把训练样本学得“太好”了的时候，很可能已经把训练样本自身的一些特点当做了所有潜在样本都会具有的一般性质，这样就会导致泛化性能下降。这种现象在机器学习中称为 <code>“过拟合”（overfitting)</code>.与“过拟合”相对的是<code>“欠拟合”（underfitting)</code>,这是指对训练样本的一般性质尚未学好。</p><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/article/82452214.jpg" alt="过拟合"></p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>有多种因素可能导致过拟合，其中最常见的情况是由于学习能力过于强大,以至于把训练样本所包含的不太一般的特性都学到了，而欠拟合则通常是由于学习能力低下而造成的.欠拟合比较容易克服，例如在决策树学习中扩展分支、在神经网络学习中増加训练轮数等，而过拟合则很麻烦.在后面的学习中我们将看到，过拟合是机器学习面临的关键障碍，各类学习算法都必然带有一些针对过拟合的措施;然而必须认识到，过拟合是无法彻底避免的，我们所能做的只是“缓解”，或者说减小其风险.</p><p>在现实任务中，我们往往有多种学习算法可供选择，甚至对同一个学习算法，当使用不同的参数配置时，也会产生不同的模型.那么，我们该选用哪一个学习算法、使用哪一种参数配置呢？这就是机器学习中的“模型选择”（model selection)问题.理想的解决方案当然是对候选模型的泛化误差进行评估，然后选择泛化误差最小的那个模型.然而如上面所讨论的，我们无法直接获得泛化误差，而训练误差又由于过拟合现象的存在而不适合作为标准，那么，在现实中如何进行模型评估与选择呢？</p><p>如何获得测试结果？ ⟹⟹ 评估方法</p><p>如何评估性能优劣？ ⟹⟹ 性能度量</p><p>如何判断实质差别？ ⟹⟹ 比较检验</p><h2 id="评估方法"><a href="#评估方法" class="headerlink" title="评估方法"></a>评估方法</h2><p>测试集应该与训练集“互斥”</p><ul><li>留出法 (hold-out)</li><li>交叉验证法 (cross validation)</li><li>自助法 (bootstrap)</li></ul><h3 id="留出法"><a href="#留出法" class="headerlink" title="留出法"></a>留出法</h3><p><code>留出法（hold-out</code>)直接将数据集D划分为两个互斥的集合，其中一个集合S作为训练集另一个作为测试集T,即D=S∪TD=S∪T, S∩T=ϕS∩T=ϕ在SS上训练出模型后，用T来评估其测试误差，作为对泛化误差的估计.</p><h3 id="交叉验证法"><a href="#交叉验证法" class="headerlink" title="交叉验证法"></a>交叉验证法</h3><p><code>“交叉验证法”（cross validation)</code>先将数据集DD划分为k个大小相似的互斥子集，即D=D1∪D2∪…∪DkD=D1∪D2∪…∪Dk , Di∩DJ=ϕDi∩DJ=ϕ(i≠ji≠j)每个子集DiDi都尽可能保持数据分布的一致性，即从DD中通过分层采样得到.然后，每次用 k - 1个子集的并集作为训练集，余下的那个子集作为测试集；这样就可获得k组训练/测试集，从而可进行k次训练和测试，最终返回的是这k个测试结果的均值.显然，交叉验证法评估结果的稳定性和保真性在很大程度上取决于k的取值，为强调这一点，通常把交叉验证法称为“k折交叉验证”（k-fold cross validation). k最常用的取值是10,此时称为10折交叉验证。</p><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/article/64932491.jpg" alt="10折交叉验证"></p><p>假定数据集DD中包含m个样本，若令k = m，则得到了交叉验证法的一个特例：<code>留一法(Leave-One-Out，简称LOO)</code>.显然，留一法不受随机样本划分方式的影响，因为m个样本只有唯一的方式划分为m个子集每个子集包含一个样本；留一法使用的训练集与初始数据集相比只少了一个样本，这就使得在绝大多数情况下，留一法中被实际评估的模型与期望评估的用训练出的模型很相似.因此，留一法的评估结果往往被认为比较准确.然而，留一法也有其缺陷：在数据集比较大时，训练m个模型的计算开销可能是难以忍受的(例如数 据集包含1百万个样本，则需训练1百万个模型)，而这还是在未考虑算法调参的情况下.另外，留一法的估计结果也未必永远比其他评估方法准确；“没有免费的午餐”定理对实验评估方法同样适用.</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>我们希望评估的是用𝐷D训练出的模型.但在留出法和交叉验证法中，由于保留了一部分样本用于测试，因此实际评估的模型所使用的训练集比D小，这必然会引入一些因训练样本规模不同而导致的估计偏差.留一法受训练样本规模变化的影响较小，但计算复杂度又太高了.有没有什么办法可以减少训练样本规模不同造成的影响，同时还能比较高效地进行实验估计呢？</p><h3 id="自助法"><a href="#自助法" class="headerlink" title="自助法"></a>自助法</h3><p><code>“自助法”（bootstrapping)</code>是一个比较好的解决方案，它直接以自助采样 法(bootstrap sampling)为基础[Efron and Tibshirani, 1993].给定包含m个样本的数据集DD,我们对它进行釆样产生数据集D′D′：每次随机从乃中挑选一个样本，将其拷贝放入D′D′,然后再将该样本放回初始数据集DD中,使得该样本在下次釆样时仍有可能被采到;这个过程重复执行m次后，我们就得到了包含m个样本的数据集D′D′，这就是自助采样的结果.显然，D中有一部分样本会在D′D′中多次出现，而另一部分样本不出现.可以做一个简单的估计，样本在m次采样中始终不被采到的概率是(1−1m)m(1−1m)m,取极限得到。</p><h4 id="limm→∞-1−1m-m⟶1e≈0-368limm→∞-1−1m-m⟶1e≈0-368"><a href="#limm→∞-1−1m-m⟶1e≈0-368limm→∞-1−1m-m⟶1e≈0-368" class="headerlink" title="limm→∞(1−1m)m⟶1e≈0.368limm→∞(1−1m)m⟶1e≈0.368"></a>limm→∞(1−1m)m⟶1e≈0.368limm→∞(1−1m)m⟶1e≈0.368</h4><p>即通过自助釆样，初始数据集乃中约有36.8%的样本未出现在釆样数据集D′D′中，于是我们可将D′D′用作训练集，D/D′D/D′用作测试集;这样，实际评估的模型与期望评估的模型都使用m个训练样本，而我们仍有数据总量约1/3的、没在训练集中出现的样本用于测试.这样的测试结果，亦称<code>“包外估计”（out-of-bag estimate)</code>.</p><blockquote><p>自助法在数据集较小、难以有效划分训练/测试集时很有用;此外，自助法能从初始数据集中产生多个不同的训练集，这对集成学习等方法有很大的好处. 然而，自助法产生的数据集改变了初始数据集的分布，这会引入估计偏差.因此,在初始数据量足够时，留出法和交叉验证法更常用一些.</p></blockquote><h2 id="性能度量"><a href="#性能度量" class="headerlink" title="性能度量"></a>性能度量</h2><p>对学习器的泛化性能进行评估，不仅需要有效可的实验估计方法，还需要有衡量模型泛化能力的评价标准，这就是<code>性能度量(performance measure)</code>.性能度量反映了任务需求，在对比不同模型的能力时，使用不同的性能度量往 往会导致不同的评判结果；这意味着模型的“好坏”是相对的，什么样的模型是好的，不仅取决于算法和数据，还决定于任务需求.</p><p>在预测任务中，给定样例集D=(x1，y1),(x2,y2),…,(xm.ym)D=(x1，y1),(x2,y2),…,(xm.ym),其中yiyi是示例xixi的真实标记.要评估学习器ff的性能，就要把学习器预测结果f(x)f(x)与真实标记yy进行比较.</p><p>回归任务最常用的性能度量是<code>“均方误差”（mean squared error)</code></p><h4 id="E-f-D-1m∑mi-1-f-xi-−yi-2E-f-D-1m∑i-1m-f-xi-−yi-2"><a href="#E-f-D-1m∑mi-1-f-xi-−yi-2E-f-D-1m∑i-1m-f-xi-−yi-2" class="headerlink" title="E(f;D)=1m∑mi=1(f(xi)−yi)2E(f;D)=1m∑i=1m(f(xi)−yi)2"></a>E(f;D)=1m∑mi=1(f(xi)−yi)2E(f;D)=1m∑i=1m(f(xi)−yi)2</h4><p>对于数据分布DD和概率密度函数p(⋅)p(⋅),均方误差可描述为</p><h4 id="E-f-D-∫x∼D（f-x-−y）2p-x-dxE-f-D-∫x∼D（f-x-−y）2p-x-dx"><a href="#E-f-D-∫x∼D（f-x-−y）2p-x-dxE-f-D-∫x∼D（f-x-−y）2p-x-dx" class="headerlink" title="E(f;D)=∫x∼D（f(x)−y）2p(x)dxE(f;D)=∫x∼D（f(x)−y）2p(x)dx"></a>E(f;D)=∫x∼D（f(x)−y）2p(x)dxE(f;D)=∫x∼D（f(x)−y）2p(x)dx</h4><p><code>错误率</code>是分类错误的样本数占样本总数的比例</p><h4 id="E-f-D-1m∑mi-1I-f-xi-≠yi-E-f-D-1m∑i-1mI-f-xi-≠yi"><a href="#E-f-D-1m∑mi-1I-f-xi-≠yi-E-f-D-1m∑i-1mI-f-xi-≠yi" class="headerlink" title="E(f;D)=1m∑mi=1I(f(xi)≠yi)E(f;D)=1m∑i=1mI(f(xi)≠yi)"></a>E(f;D)=1m∑mi=1I(f(xi)≠yi)E(f;D)=1m∑i=1mI(f(xi)≠yi)</h4><p><code>精度</code>则是分类正确的样本数占样本总数的比例</p><h4 id="acc-f-D-1m∑mi-1I-f-xi-yi-acc-f-D-1m∑i-1mI-f-xi-yi"><a href="#acc-f-D-1m∑mi-1I-f-xi-yi-acc-f-D-1m∑i-1mI-f-xi-yi" class="headerlink" title="acc(f;D)=1m∑mi=1I(f(xi)=yi)acc(f;D)=1m∑i=1mI(f(xi)=yi)"></a>acc(f;D)=1m∑mi=1I(f(xi)=yi)acc(f;D)=1m∑i=1mI(f(xi)=yi)</h4><h4 id="错误率："><a href="#错误率：" class="headerlink" title="错误率："></a>错误率：</h4><h4 id="E-f-D-∫x∼DI（f-x-≠y）p-x-dxE-f-D-∫x∼DI（f-x-≠y）p-x-dx"><a href="#E-f-D-∫x∼DI（f-x-≠y）p-x-dxE-f-D-∫x∼DI（f-x-≠y）p-x-dx" class="headerlink" title="E(f;D)=∫x∼DI（f(x)≠y）p(x)dxE(f;D)=∫x∼DI（f(x)≠y）p(x)dx"></a>E(f;D)=∫x∼DI（f(x)≠y）p(x)dxE(f;D)=∫x∼DI（f(x)≠y）p(x)dx</h4><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/article/30344968.jpg" alt="混淆矩阵"></p><h4 id="查准率：P-TPTP-FPP-TPTP-FP"><a href="#查准率：P-TPTP-FPP-TPTP-FP" class="headerlink" title="查准率：P=TPTP+FPP=TPTP+FP"></a>查准率：P=TPTP+FPP=TPTP+FP</h4><h4 id="查全率：R-TPTP-FNR-TPTP-FN"><a href="#查全率：R-TPTP-FNR-TPTP-FN" class="headerlink" title="查全率：R=TPTP+FNR=TPTP+FN"></a>查全率：R=TPTP+FNR=TPTP+FN</h4><blockquote><p>查准率和查全率是一对予盾的度量，一般来说，查准率高时，查全率往往偏低查全率高时.查准率偏低。</p></blockquote><h3 id="PR图，BEP（Break-Event-Point）"><a href="#PR图，BEP（Break-Event-Point）" class="headerlink" title="PR图，BEP（Break-Event Point）"></a>PR图，BEP（Break-Event Point）</h3><p>根据学习器的预测结果按正例可能性大小对样例进行排序，并逐个把样本作为正例进行预测</p><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/article/5696241.jpg" alt="pr图"></p><p>比 BEP 更常用的 F1 度量：</p><h4 id="F1：F1-2PRP-R-2TP样例总数-TP−TNF1-2PRP-R-2TP样例总数-TP−TN"><a href="#F1：F1-2PRP-R-2TP样例总数-TP−TNF1-2PRP-R-2TP样例总数-TP−TN" class="headerlink" title="F1：F1=2PRP+R=2TP样例总数+TP−TNF1=2PRP+R=2TP样例总数+TP−TN"></a>F1：F1=2PRP+R=2TP样例总数+TP−TNF1=2PRP+R=2TP样例总数+TP−TN</h4><p>若对查准率/查全率有不同偏好：</p><h4 id="Fβ-1-β2-PR-β2P-RFβ-1-β2-PR-β2P-R"><a href="#Fβ-1-β2-PR-β2P-RFβ-1-β2-PR-β2P-R" class="headerlink" title="Fβ=(1+β2)PR(β2P)+RFβ=(1+β2)PR(β2P)+R"></a>Fβ=(1+β2)PR(β2P)+RFβ=(1+β2)PR(β2P)+R</h4><blockquote><p>β=1β=1时退化为标准的F1；β&gt;1β&gt;1时查全率有更大影响；β&lt;1β&lt;1时查准率有更大影响。</p></blockquote><h4 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h4><p>很多时候我们有多个二分类混淆矩阵</p><p><strong>宏</strong></p><h4 id="macro−P-1n∑ni-1Pimacro−P-1n∑i-1nPi"><a href="#macro−P-1n∑ni-1Pimacro−P-1n∑i-1nPi" class="headerlink" title="macro−P=1n∑ni=1Pimacro−P=1n∑i=1nPi"></a>macro−P=1n∑ni=1Pimacro−P=1n∑i=1nPi</h4><h4 id="macro−R-1n∑ni-1Rimacro−R-1n∑i-1nRi"><a href="#macro−R-1n∑ni-1Rimacro−R-1n∑i-1nRi" class="headerlink" title="macro−R=1n∑ni=1Rimacro−R=1n∑i=1nRi"></a>macro−R=1n∑ni=1Rimacro−R=1n∑i=1nRi</h4><h4 id="macro−F1-2macro−P×macro−Rmacro−P-macro−Rmacro−F1-2macro−P×macro−Rmacro−P-macro−R"><a href="#macro−F1-2macro−P×macro−Rmacro−P-macro−Rmacro−F1-2macro−P×macro−Rmacro−P-macro−R" class="headerlink" title="macro−F1=2macro−P×macro−Rmacro−P+macro−Rmacro−F1=2macro−P×macro−Rmacro−P+macro−R"></a>macro−F1=2macro−P×macro−Rmacro−P+macro−Rmacro−F1=2macro−P×macro−Rmacro−P+macro−R</h4><p><strong>微</strong></p><h4 id="micro−P-PT¯¯¯¯¯¯¯¯TP¯¯¯¯¯¯¯¯-FP¯¯¯¯¯¯¯¯micro−P-PT¯TP¯-FP¯"><a href="#micro−P-PT¯¯¯¯¯¯¯¯TP¯¯¯¯¯¯¯¯-FP¯¯¯¯¯¯¯¯micro−P-PT¯TP¯-FP¯" class="headerlink" title="micro−P=PT¯¯¯¯¯¯¯¯TP¯¯¯¯¯¯¯¯+FP¯¯¯¯¯¯¯¯micro−P=PT¯TP¯+FP¯"></a>micro−P=PT¯¯¯¯¯¯¯¯TP¯¯¯¯¯¯¯¯+FP¯¯¯¯¯¯¯¯micro−P=PT¯TP¯+FP¯</h4><h4 id="micro−P-TP¯¯¯¯¯¯¯¯TP¯¯¯¯¯¯¯¯-FN¯¯¯¯¯¯¯¯¯micro−P-TP¯TP¯-FN¯"><a href="#micro−P-TP¯¯¯¯¯¯¯¯TP¯¯¯¯¯¯¯¯-FN¯¯¯¯¯¯¯¯¯micro−P-TP¯TP¯-FN¯" class="headerlink" title="micro−P=TP¯¯¯¯¯¯¯¯TP¯¯¯¯¯¯¯¯+FN¯¯¯¯¯¯¯¯¯micro−P=TP¯TP¯+FN¯"></a>micro−P=TP¯¯¯¯¯¯¯¯TP¯¯¯¯¯¯¯¯+FN¯¯¯¯¯¯¯¯¯micro−P=TP¯TP¯+FN¯</h4><h4 id="macro−F1-2macro−P×macro−Rmacro−P-macro−Rmacro−F1-2macro−P×macro−Rmacro−P-macro−R-1"><a href="#macro−F1-2macro−P×macro−Rmacro−P-macro−Rmacro−F1-2macro−P×macro−Rmacro−P-macro−R-1" class="headerlink" title="macro−F1=2macro−P×macro−Rmacro−P+macro−Rmacro−F1=2macro−P×macro−Rmacro−P+macro−R"></a>macro−F1=2macro−P×macro−Rmacro−P+macro−Rmacro−F1=2macro−P×macro−Rmacro−P+macro−R</h4><h3 id="ROC-与-AUC"><a href="#ROC-与-AUC" class="headerlink" title="ROC 与 AUC"></a>ROC 与 AUC</h3><blockquote><p>ROC全称是“受试者工作特征”（Receiver Operating Characteristic）。ROC曲线的面积就是AUC（Area Under the Curve）</p></blockquote><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/article/4710690.jpg" alt="ROC和AUC"></p><h4 id="TPR-TPTP-FNTPR-TPTP-FN"><a href="#TPR-TPTP-FNTPR-TPTP-FN" class="headerlink" title="TPR=TPTP+FNTPR=TPTP+FN"></a>TPR=TPTP+FNTPR=TPTP+FN</h4><h4 id="FPR-FPTN-FPFPR-FPTN-FP"><a href="#FPR-FPTN-FPFPR-FPTN-FP" class="headerlink" title="FPR=FPTN+FPFPR=FPTN+FP"></a>FPR=FPTN+FPFPR=FPTN+FP</h4><h4 id="AUC-frac-1-2-sum-m-1-i-1-x-i-1-x-i-cdot-y-i-y-i-1"><a href="#AUC-frac-1-2-sum-m-1-i-1-x-i-1-x-i-cdot-y-i-y-i-1" class="headerlink" title="$AUC=\frac{1}{2}\sum^{m-1}{i=1}(x{i+1}-x_i)\cdot(y_i + y_{i+1})$"></a>$AUC=\frac{1}{2}\sum^{m-1}<em>{i=1}(x</em>{i+1}-x_i)\cdot(y_i + y_{i+1})$</h4><h3 id="代价敏感错误率与代价曲线"><a href="#代价敏感错误率与代价曲线" class="headerlink" title="代价敏感错误率与代价曲线"></a>代价敏感错误率与代价曲线</h3><p>在现实任务中常会遇到这样的情况：不同类型的错误所造成的后果不同. 例如在医疗诊断中，错误地把患者诊断为健康人与错误地把健康人诊断为患者, 看起来都是犯了“一次错误”，但后者的影响是增加了进一步检查的麻烦，前者的后果却可能是丧失了拯救生命的最佳时机；再如，门禁系统错误地把可通行人员拦在门外，将使得用户体验不佳,但错误地把陌生人放进门内，则会造成严重的安全事故.为权衡不同类型错误所造成的不同损失，可为错误赋予“非 均等代”（unequal cost).</p><p>以二分类任务为例，我们可根据任务的领域知识设定一个“代价矩阵”（cost matrix)，其中costijcostij表示将第i类样本预测为第j类样本的代价.一般来说，costii=0costii=0;若将第0类判别为第1类所造成的损失更大，则cost01&gt;cost10cost01&gt;cost10;损失程度相差越大，cost01cost01与cost10cost10值的差别越大.</p><p><img src="http://lesama-blog.oss-cn-beijing.aliyuncs.com/article/61524266.jpg" alt="代价矩阵"></p><h4 id="代价敏感（cost-sensitive）错误率E-f-D-cost-1m-∑xi∈D-I-f-xi-≠yi-×cost01-∑xi∈D−I-f-xi-≠yi-×cost10-督的学习模型，通常用来进行模式识别、分类、以及回归分析。"><a href="#代价敏感（cost-sensitive）错误率E-f-D-cost-1m-∑xi∈D-I-f-xi-≠yi-×cost01-∑xi∈D−I-f-xi-≠yi-×cost10-督的学习模型，通常用来进行模式识别、分类、以及回归分析。" class="headerlink" title="代价敏感（cost-sensitive）错误率E(f;D;cost)=1m(∑xi∈D+I(f(xi)≠yi)×cost01+∑xi∈D−I(f(xi)≠yi)×cost10)督的学习模型，通常用来进行模式识别、分类、以及回归分析。"></a>代价敏感（cost-sensitive）错误率E(f;D;cost)=1m(∑xi∈D+I(f(xi)≠yi)×cost01+∑xi∈D−I(f(xi)≠yi)×cost10)督的学习模型，通常用来进行模式识别、分类、以及回归分析。</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;机器学习术语&quot;&gt;&lt;a href=&quot;#机器学习术语&quot; class=&quot;headerlink&quot; title=&quot;机器学习术语&quot;&gt;&lt;/a&gt;机器学习术语&lt;/h1&gt;&lt;p&gt;机器学习正是这样一门学科，它致力于研究如何通过计算的手段，利用经验来改善系统自身的性能.在计算机系统中，“经
      
    
    </summary>
    
      <category term="机器学习" scheme="https://lesama.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="人工智能" scheme="https://lesama.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>数值类型与序列类型</title>
    <link href="https://lesama.github.io/python-numerical-sequence.html"/>
    <id>https://lesama.github.io/python-numerical-sequence.html</id>
    <published>2019-02-25T13:40:51.000Z</published>
    <updated>2019-03-02T18:12:30.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-数值类型"><a href="#1-数值类型" class="headerlink" title="1. 数值类型"></a>1. 数值类型</h1><h2 id="1-1-int（整型）"><a href="#1-1-int（整型）" class="headerlink" title="1.1 int（整型）"></a>1.1 int（整型）</h2><p>整型也就是我们日常中的整数，在Python中不需要声明变量，直接赋值即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">print(type(a))</span><br></pre></td></tr></table></figure><h2 id="1-2-float（浮点型）"><a href="#1-2-float（浮点型）" class="headerlink" title="1.2 float（浮点型）"></a>1.2 float（浮点型）</h2><h3 id="基本情况"><a href="#基本情况" class="headerlink" title="基本情况"></a>基本情况</h3><p>浮点型一般是我们常见的小数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="number">2.2</span></span><br><span class="line">print(type(b))</span><br></pre></td></tr></table></figure><h3 id="decimal库"><a href="#decimal库" class="headerlink" title="decimal库"></a>decimal库</h3><p>但是<code>浮点数</code>不是我们真正看到的数，比如<code>1.2</code>实际是<code>1.1999999999</code></p><p>所以小数计算都是不精确的，那么我们如何进行精确计算呢？</p><p>在Python中如果我们要实现精确计算，我们是使用decimal这个库函数 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> decimal </span><br><span class="line"></span><br><span class="line">a = decimal.Decimal(<span class="string">'2.2'</span>)</span><br><span class="line">b = decimal.Decimal(<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">print(a-b)</span><br></pre></td></tr></table></figure><h3 id="基本整数与小数四则运算"><a href="#基本整数与小数四则运算" class="headerlink" title="基本整数与小数四则运算"></a>基本整数与小数四则运算</h3><p>计算机在计算的时候，除了整数运算，还有小数运算，还有小数和整数的混合运算</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td style="text-align:center">3 + 4 输出 7</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td style="text-align:center">8 - 6 输出 2</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td style="text-align:center">3 * 4 输出 12</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td><td style="text-align:center">6 / 3 输出 2.0</td></tr><tr><td style="text-align:center">//</td><td style="text-align:center">向下取整</td><td style="text-align:center">9 // 2 输出结果 4 , 9.0//2.0 输出结果 4.0</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取余</td><td style="text-align:center">6 % 4 输出 2</td></tr><tr><td style="text-align:center">**</td><td style="text-align:center">幂</td><td style="text-align:center">2 ** 3 输出 8</td></tr></tbody></table></div><p><strong>向上取整：使用<code>math库</code>函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.ceil(<span class="number">2.3</span>/<span class="number">2</span>)  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>​       </p><h2 id="1-3-bool（布尔类型）"><a href="#1-3-bool（布尔类型）" class="headerlink" title="1.3 bool（布尔类型）"></a>1.3 bool（布尔类型）</h2><p>布尔类型只有<code>True</code>和<code>False</code>两种值 ，<strong>在数值计算中，True表示1，False表示0。</strong></p><h2 id="1-4-complex-（复数）"><a href="#1-4-complex-（复数）" class="headerlink" title="1.4  complex （复数）"></a>1.4  complex （复数）</h2><p>复数由<strong>实数部分</strong>和<strong>虚数部分</strong>构成，可以用<code>a + bj</code>,或者<code>complex(a,b)</code>表示， 复数的实部a和虚部b都是浮点型。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">5</span> + <span class="number">6j</span></span><br><span class="line">d = complex(<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">print(type(c))</span><br><span class="line">print(type(d))</span><br></pre></td></tr></table></figure><h1 id="2-序列类型"><a href="#2-序列类型" class="headerlink" title="2. 序列类型"></a>2. 序列类型</h1><p>​             </p><h2 id="2-1-字符串（str）"><a href="#2-1-字符串（str）" class="headerlink" title="2.1 字符串（str）"></a>2.1 字符串（str）</h2><p>​    </p><h3 id="字符串的表示形式"><a href="#字符串的表示形式" class="headerlink" title="字符串的表示形式"></a>字符串的表示形式</h3><p>​    </p><p>在<code>Python3</code>中字符串有3中表示方式，如下</p><p>a. 使用单引号（’）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">st1 = <span class="string">'hello world'</span></span><br><span class="line">print(st1)</span><br></pre></td></tr></table></figure><p>b. 使用双引号（”）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">st2 = <span class="string">"hello world"</span> <span class="comment">#双引号中的字符串与单引号中的字符串用法完全相同</span></span><br><span class="line">print(st2)</span><br></pre></td></tr></table></figure><p>c. 使用三引号（’’’）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">st2 = <span class="string">'''hello</span></span><br><span class="line"><span class="string">world'''</span>  <span class="comment">#三引号可表示多行的字符串，可以在三引号中自由的使用单引号和双引号</span></span><br><span class="line">print(st2)</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="字符串的使用"><a href="#字符串的使用" class="headerlink" title="字符串的使用"></a>字符串的使用</h3><p><code>字符串的截取</code>，语法格式如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量[头下标:尾下标] <span class="comment">#索引值以 0 为开始值，-1 为从末尾的开始位置。</span></span><br></pre></td></tr></table></figure><p>实例如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st2 = &apos;Runoob&apos;</span><br><span class="line"> </span><br><span class="line">print (st2)          # 输出字符串</span><br><span class="line">print (st2[0:-1])    # 输出第一个到倒数第二个的所有字符</span><br><span class="line">print (st2[0])       # 输出字符串第一个字符</span><br><span class="line">print (st2[2:5])     # 输出从第三个开始到第五个的字符</span><br><span class="line">print (st2[2:])      # 输出从第三个开始的后的所有字符</span><br><span class="line">print (st2 * 2)      # 输出字符串两次</span><br><span class="line">print (st2 + &quot;TEST&quot;) # 连接字符串</span><br></pre></td></tr></table></figure><p>​    </p><p>Python 使用反斜杠<code>\</code>转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'楽\no'</span>)</span><br><span class="line"><span class="comment">#输出：楽</span></span><br><span class="line"><span class="comment"># oob</span></span><br><span class="line">print(<span class="string">r'楽\no'</span>)</span><br><span class="line"><span class="comment">#输出：楽\no</span></span><br></pre></td></tr></table></figure><p>另外，反斜杠<code>\</code>可以作为续行符，表示下一行是上一行的延续。也可以使用 <strong>“””…”””</strong> 或者 <strong>‘’’…’’’</strong> 跨越多行。</p><p><strong>总结：</strong></p><ol><li>反斜杠可以用来转义，使用r可以让反斜杠不发生转义。</li><li>字符串可以用+运算符连接在一起，用*运算符重复。</li><li>Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。</li><li>Python中的字符串不能改变 。</li></ol><p>​    </p><h2 id="2-2-列表（list）"><a href="#2-2-列表（list）" class="headerlink" title="2.2 列表（list）"></a>2.2 列表（list）</h2><p>​    </p><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><p>列表是写在方括号<code>[]</code> 之间,用逗号分隔开的元素列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list0 = [<span class="number">1</span>,<span class="string">'a'</span>,[<span class="number">2</span>]]</span><br><span class="line">print(type(list0))</span><br></pre></td></tr></table></figure><p>​     </p><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'abcd'</span>,<span class="number">786</span>,<span class="number">2.23</span>,<span class="string">'楽'</span>,<span class="number">70.2</span> ]</span><br><span class="line">list2 = [<span class="number">123</span>, <span class="string">'楽'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (list1)            <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="keyword">print</span> (list1[<span class="number">0</span>])         <span class="comment"># 输出列表第一个元素</span></span><br><span class="line"><span class="keyword">print</span> (list1[<span class="number">1</span>:<span class="number">3</span>])       <span class="comment"># 从第二个开始输出到第三个元素</span></span><br><span class="line"><span class="keyword">print</span> (list1[<span class="number">2</span>:])        <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="keyword">print</span> (list2 * <span class="number">2</span>)        <span class="comment"># 输出两次列表</span></span><br><span class="line"><span class="keyword">print</span> (list1 + list2)    <span class="comment"># 连接列表</span></span><br></pre></td></tr></table></figure><p>与Python字符串不一样的是，<strong>列表中的元素是可以改变的</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">a[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line"></span><br><span class="line">print(a) <span class="comment">#[9, 2, 13, 14, 15, 6]</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">2</span>:<span class="number">5</span>] = []   <span class="comment"># 将对应的元素值设置为 [] </span></span><br><span class="line">print(a)   <span class="comment">#[9, 2, 6]</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li>List写在方括号之间，元素用逗号隔开。</li><li>和字符串一样，list可以被索引和切片。</li><li>List可以使用+操作符进行拼接。</li><li>List中的元素是可以改变的。</li></ol><p>​    </p><h2 id="2-3-元组"><a href="#2-3-元组" class="headerlink" title="2.3 元组"></a>2.3 元组</h2><p>​       </p><p>元组（tuple）与列表类似，<strong>不同之处在于元组的元素不能修改</strong>。元组写在小括号 <code>()</code>里，元素之间用逗号隔开。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tup = ( <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'楽'</span>, <span class="number">70.2</span>  )</span><br><span class="line">tinytup = (<span class="number">123</span>, <span class="string">'楽'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (tup)             <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="keyword">print</span> (tup[<span class="number">0</span>])          <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="keyword">print</span> (tup[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line"><span class="keyword">print</span> (tup[<span class="number">2</span>:])         <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="keyword">print</span> (tinytup * <span class="number">2</span>)     <span class="comment"># 输出两次元组</span></span><br><span class="line"><span class="keyword">print</span> (tup + tinytup)   <span class="comment"># 连接元组</span></span><br></pre></td></tr></table></figure><p>元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取。</p><p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p><p>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup1 = ()    <span class="comment"># 空元组</span></span><br><span class="line">tup2 = (<span class="number">20</span>,) <span class="comment"># 一个元素，需要在元素后添加逗号</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li><p>与字符串一样，元组的元素不能修改。</p></li><li><p>元组也可以被索引和切片，方法一样。</p></li><li><p>注意构造包含 0 或 1 个元素的元组的特殊语法规则。</p></li><li><p>元组也可以使用+操作符进行拼接。</p><p>​    </p><h1 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3. 扩展"></a>3. 扩展</h1></li></ol><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><code>字符串转列表</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'abcd'</span></span><br><span class="line">b = list(a)</span><br><span class="line"></span><br><span class="line">print(type(a))</span><br><span class="line">print(type(b))</span><br><span class="line">print(b) <span class="comment">#['a', 'b', 'c', 'd']</span></span><br></pre></td></tr></table></figure><p><code>列表转字符串</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">b = str(a)</span><br><span class="line"></span><br><span class="line">print(type(a))</span><br><span class="line">print(type(b))</span><br><span class="line">print(b)  <span class="comment">#"['a', 'b', 'c', 'd']"</span></span><br></pre></td></tr></table></figure><p><code>字符串转元组</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'abcd'</span></span><br><span class="line">b = tuple(a)</span><br><span class="line"></span><br><span class="line">print(type(a))</span><br><span class="line">print(type(b))</span><br><span class="line">print(b)  <span class="comment">#('a', 'b', 'c', 'd')</span></span><br></pre></td></tr></table></figure><p>​     </p><p><code>元组转字符串</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br><span class="line">b = str(a)</span><br><span class="line"></span><br><span class="line">print(type(a))</span><br><span class="line">print(type(b))</span><br><span class="line">print(b)    <span class="comment">#"('a', 'b', 'c', 'd')"</span></span><br></pre></td></tr></table></figure><p>​     </p><h2 id="拆包"><a href="#拆包" class="headerlink" title="拆包"></a>拆包</h2><p>​     </p><p>元组拆包可以应用到任何迭代对象上， 唯一的要求是， 被可迭代对象中的元素数量必须要和这些元素的元组的空档数一致， 除非我们用<code>*</code>来表示忽略多余的元素。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br><span class="line">x,*y,z = a</span><br><span class="line"></span><br><span class="line">print(x)    <span class="comment">#'a'</span></span><br><span class="line">print(z)    <span class="comment">#'d'</span></span><br><span class="line">print(y)    <span class="comment">#['b', 'c']</span></span><br></pre></td></tr></table></figure><p><code>x</code> 接收第一个元素，<code>z</code> 接收最后一个元素，由于<code>y</code>前面有<code>*</code>号，所以剩余的元素由<code>y</code>接收</p><p>总结：有多少个元素就需要多少个变量来接收，除非有<code>*</code>号，不然就会报错.</p><p>​     </p><h2 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h2><p>​         </p><p>变量的保存都是保存在内存中</p><p>注意：<strong>变量</strong>是没有类型的，有类型的是他所<strong>指向的数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> a = <span class="number">123</span></span><br><span class="line">b = <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>（id(a)） <span class="comment"># 10923232</span></span><br><span class="line">print(id(b))   <span class="comment"># 140343125492152</span></span><br><span class="line"><span class="comment">#id()：查看数据的地址</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">'111'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>（id(a)）  <span class="comment"># 140342939172344</span></span><br></pre></td></tr></table></figure><p>赋值给变量是保存在内存中，重新赋值后，变量指向新的地址 </p><p>​        </p><h2 id="变量的引用-成员运算"><a href="#变量的引用-成员运算" class="headerlink" title="变量的引用-成员运算"></a>变量的引用-成员运算</h2><p>​          </p><p>通过<code>in</code>或者<code>not in</code> 来进行成员运算 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'abcd123'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'c'</span> <span class="keyword">in</span> a)       <span class="comment">#True</span></span><br><span class="line">print(<span class="string">'8'</span> <span class="keyword">in</span> a)        <span class="comment">#False</span></span><br><span class="line">print(<span class="string">'a'</span> <span class="keyword">not</span> <span class="keyword">in</span> a)   <span class="comment">#False</span></span><br><span class="line">print(<span class="string">'q'</span> <span class="keyword">not</span> <span class="keyword">in</span> a)   <span class="comment">#True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-数值类型&quot;&gt;&lt;a href=&quot;#1-数值类型&quot; class=&quot;headerlink&quot; title=&quot;1. 数值类型&quot;&gt;&lt;/a&gt;1. 数值类型&lt;/h1&gt;&lt;h2 id=&quot;1-1-int（整型）&quot;&gt;&lt;a href=&quot;#1-1-int（整型）&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Python" scheme="https://lesama.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="https://lesama.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="数据类型" scheme="https://lesama.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>JQuery</title>
    <link href="https://lesama.github.io/JQuery.html"/>
    <id>https://lesama.github.io/JQuery.html</id>
    <published>2019-02-16T09:08:18.000Z</published>
    <updated>2019-02-17T02:54:02.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-JQ简介"><a href="#1-JQ简介" class="headerlink" title="1. JQ简介"></a>1. JQ简介</h1><h2 id="1-1-什么是JQ"><a href="#1-1-什么是JQ" class="headerlink" title="1.1 什么是JQ"></a>1.1 什么是JQ</h2><p>​    JQ是JS写的插件库，说白了，就是一个js文件</p><h2 id="1-2-JS和JQ是区别"><a href="#1-2-JS和JQ是区别" class="headerlink" title="1.2 JS和JQ是区别"></a>1.2 JS和JQ是区别</h2><p>​    凡是用jq能实现的，js都能实现，js能实现的，jq却不一定能实现</p><h2 id="1-3-JQ的理念"><a href="#1-3-JQ的理念" class="headerlink" title="1.3 JQ的理念"></a>1.3 JQ的理念</h2><p>​    减少代码量，提高工作效率</p><h2 id="1-4-JQ的引入"><a href="#1-4-JQ的引入" class="headerlink" title="1.4 JQ的引入"></a>1.4 JQ的引入</h2><h3 id="1-4-1-本地文件引入"><a href="#1-4-1-本地文件引入" class="headerlink" title="1.4.1 本地文件引入"></a>1.4.1 本地文件引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.2.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-2-CDN引入"><a href="#1-4-2-CDN引入" class="headerlink" title="1.4.2 CDN引入"></a>1.4.2 CDN引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相应网站：<a href="https://www.bootcdn.cn/jquery/" target="_blank" rel="noopener">https://www.bootcdn.cn/jquery/</a></p><h1 id="2-JQ的基本使用"><a href="#2-JQ的基本使用" class="headerlink" title="2. JQ的基本使用"></a>2. JQ的基本使用</h1><p>在JavaScript中，用$声明使用的是jQuery,例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="number">123</span>);<span class="comment">//点击button时弹出123</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-1-JQ的选择器"><a href="#2-1-JQ的选择器" class="headerlink" title="2.1 JQ的选择器"></a>2.1 JQ的选择器</h2><p>在jQ中使用选择器选择元素和在CSS中使用CSS选择器是一样的 ，上面那个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//使用的是标签选择器</span></span></span><br><span class="line"><span class="undefined">        alert(123);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//使用的是类选择器</span></span></span><br><span class="line"><span class="undefined">        alert(123);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然在使用过程中也可以用后代选择器，兄弟选择器之类的选择器</p><h2 id="2-2-基本使用1"><a href="#2-2-基本使用1" class="headerlink" title="2.2 基本使用1"></a>2.2 基本使用1</h2><p>我们首先看下面代码，方便后面讲解</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span> <span class="attr">class</span>=<span class="string">"p11"</span>&gt;</span>我是段落标签一<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span> <span class="attr">class</span>=<span class="string">"p11"</span>&gt;</span>我是段落标签二<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p3"</span> <span class="attr">class</span>=<span class="string">"p11"</span>&gt;</span>我是段落标签三<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是文本标签一<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是文本标签二<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#p1"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-1-JS与JQ之间的转换"><a href="#2-2-1-JS与JQ之间的转换" class="headerlink" title="2.2.1 JS与JQ之间的转换"></a>2.2.1 JS与JQ之间的转换</h3><h4 id="1-jq转js：get-与"><a href="#1-jq转js：get-与" class="headerlink" title="(1) jq转js：get()与[]"></a>(1) jq转js：get()与[]</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$("p").get(2).innerText = '1111111';</span><br><span class="line">$("p")[1].innerText = '222222';</span><br></pre></td></tr></table></figure><p>get()与[]中填写索引值，然后对其进行操作。</p><h4 id="2-js转jq"><a href="#2-js转jq" class="headerlink" title="(2) js转jq"></a>(2) js转jq</h4><p>用$()将js定义的变量括起来，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(p1) //js转jq</span><br></pre></td></tr></table></figure><h5 id="html"><a href="#html" class="headerlink" title="html()"></a>html()</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(p1).html(123123); //html等同于js的innerHtml</span><br></pre></td></tr></table></figure><h5 id="text"><a href="#text" class="headerlink" title="text()"></a>text()</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(p1).text(123123); //text等同于js的innerText</span><br></pre></td></tr></table></figure><h3 id="2-2-2-鼠标事件"><a href="#2-2-2-鼠标事件" class="headerlink" title="2.2.2 鼠标事件"></a>2.2.2 鼠标事件</h3><h4 id="1-单击：click"><a href="#1-单击：click" class="headerlink" title="(1) 单击：click()"></a>(1) 单击：click()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#p1&quot;).click(function () &#123;</span><br><span class="line">        alert(123)</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="2-鼠标移入移出"><a href="#2-鼠标移入移出" class="headerlink" title="(2) 鼠标移入移出"></a>(2) 鼠标移入移出</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$("#p1").hover(function () &#123;</span><br><span class="line">       $("#p2").html("鼠标移入效果") //鼠标移入</span><br><span class="line">   &#125;,function () &#123;</span><br><span class="line">       $("#p2").html("鼠标移出效果") //鼠标移出</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h3 id="2-2-3-追加与添加"><a href="#2-2-3-追加与添加" class="headerlink" title="2.2.3 追加与添加"></a>2.2.3 追加与添加</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$("#p1").append("<span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p1的兄弟<span class="tag">&lt;/<span class="name">p</span>&gt;</span>"); //将双引号内的内容追加到#p1后面</span><br><span class="line">$("#p1").prepend("<span class="tag">&lt;<span class="name">p</span>&gt;</span>我也是p1的兄弟<span class="tag">&lt;/<span class="name">p</span>&gt;</span>"); //将双引号内的内容添加到#p1前面</span><br></pre></td></tr></table></figure><h3 id="2-2-4-遍历：each"><a href="#2-2-4-遍历：each" class="headerlink" title="2.2.4 遍历：each"></a>2.2.4 遍历：each</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$("ul li").each(function (i) &#123;</span><br><span class="line">        $(this).html("我是第"+i+"个") //this是指遍历的当前的对象自己</span><br><span class="line">alert($(this).index()); //弹出遍历的当前的对象的索引值</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="2-2-5-操作属性"><a href="#2-2-5-操作属性" class="headerlink" title="2.2.5 操作属性"></a>2.2.5 操作属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$("#div1").attr("class","b");  //添加类属性，类名为b</span><br><span class="line">$("#div1").removeAttr("class") //删除属性class</span><br></pre></td></tr></table></figure><h3 id="2-2-6-操作class类名"><a href="#2-2-6-操作class类名" class="headerlink" title="2.2.6 操作class类名"></a>2.2.6 操作class类名</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$("#div1").addClass("div321"); //添加类名</span><br><span class="line">$("#div1").removeClass(); //删除类名</span><br></pre></td></tr></table></figure><h3 id="2-2-7-判断属性"><a href="#2-2-7-判断属性" class="headerlink" title="2.2.7 判断属性"></a>2.2.7 判断属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert($("#div1").hasClass("div222")); //判断div1中是否存在类名为div222</span><br></pre></td></tr></table></figure><h3 id="2-2-8-滚动条事件"><a href="#2-2-8-滚动条事件" class="headerlink" title="2.2.8 滚动条事件"></a>2.2.8 滚动条事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(window).scroll(function () &#123;</span><br><span class="line">console.log($(document).scrollTop()); //打印滚动条与顶部的距离</span><br><span class="line">console.log($(document).scrollLeft()) //打印滚动条与左边的距离</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-2-9-查找元素"><a href="#2-2-9-查找元素" class="headerlink" title="2.2.9 查找元素"></a>2.2.9 查找元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log($("#div1").parent()); //查找父级元素body</span><br><span class="line">console.log($("#div1").children()); //查找子级元素</span><br><span class="line">console.log($("#p1").siblings()); //查找兄弟元素</span><br><span class="line">console.log($("#div1").find("span")); //查找后代元素</span><br><span class="line">console.log($("#sp1").parents("p")); //查找祖辈元素</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-JQ简介&quot;&gt;&lt;a href=&quot;#1-JQ简介&quot; class=&quot;headerlink&quot; title=&quot;1. JQ简介&quot;&gt;&lt;/a&gt;1. JQ简介&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是JQ&quot;&gt;&lt;a href=&quot;#1-1-什么是JQ&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="web" scheme="https://lesama.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://lesama.github.io/tags/web/"/>
    
      <category term="网页" scheme="https://lesama.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
      <category term="jq" scheme="https://lesama.github.io/tags/jq/"/>
    
      <category term="html" scheme="https://lesama.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-03</title>
    <link href="https://lesama.github.io/JavaScript-03.html"/>
    <id>https://lesama.github.io/JavaScript-03.html</id>
    <published>2019-02-11T13:46:30.000Z</published>
    <updated>2019-03-04T10:40:43.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Math方法"><a href="#Math方法" class="headerlink" title="Math方法"></a>Math方法</h1><ul><li>sqrt：开方</li><li>abs：绝对值</li><li>PI：π</li><li>pow(x,y) ：x的y次方</li><li>round：取整（四舍五入）</li><li>random：随机数0~1</li><li>min（x，y，z）：从x，y，z中取最小值</li><li>max（x，y，z）：从x，y，z中取最大值</li><li>ceil：向上取整</li><li>floor：向下取整</li></ul><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.round(Math.random*100) //随机生成1~100的随机数</span><br></pre></td></tr></table></figure><h1 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h1><h2 id="Date方法"><a href="#Date方法" class="headerlink" title="Date方法"></a>Date方法</h2><p>new Date()：新建日期对象</p><ul><li><p>getFullYear：获取年份</p></li><li><p>getMonth：获取月份</p></li><li><p>getDay：获取日</p></li><li><p>getHours：获取时</p></li><li><p>getMinutes：获取分</p></li><li><p>getSeconds：获取秒</p></li></ul><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var today = new Date();</span><br><span class="line">var year = today.getFullYear();</span><br><span class="line">var month = today.getMonth()+1;</span><br><span class="line">var day = today.getDay();</span><br><span class="line">var hour = today.getHours();</span><br><span class="line">var minute = today.getMinutes();</span><br><span class="line"> var second = today.getSeconds();</span><br><span class="line">console.log(year+&apos;年&apos;+month+&apos;月&apos;+day+&apos;日&apos;+hour+&apos;:&apos;+minute+&apos;:&apos;+second);</span><br></pre></td></tr></table></figure><h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><p>时间戳：格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var timestamp = Date.new();//新建</span><br><span class="line"></span><br><span class="line">console.log(&quot;timestamp:&quot;timestamp);</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>函数是通常是把一系列重复使用的操作封装成一个方法，方便调用</p><p>函数分类：有名函数，匿名函数</p><h2 id="定义有名函数"><a href="#定义有名函数" class="headerlink" title="定义有名函数:"></a>定义有名函数:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function 函数名()&#123;</span><br><span class="line">//代码块</span><br><span class="line">console.log(&quot;OK&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var result=function 函数名()&#123;</span><br><span class="line">//代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名();</span><br></pre></td></tr></table></figure><h2 id="匿名函数："><a href="#匿名函数：" class="headerlink" title="匿名函数："></a>匿名函数：</h2><p>​    匿名函数一般充当事件函数</p><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var box = document.getElementById(&apos;box&apos;);</span><br><span class="line"></span><br><span class="line">box.onclick = function()&#123;</span><br><span class="line"></span><br><span class="line">console.log(123);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="自调用函数："><a href="#自调用函数：" class="headerlink" title="自调用函数："></a>自调用函数：</h2><p>自调用函数是在函数表达式写完后自动执行</p><p>其函数表达式前面加上 (,),+,-,!,~ </p><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line"> console.log(&quot;ok&quot;);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">+function()&#123;</span><br><span class="line"> console.log(&quot;ok&quot;);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>函数参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function sum()&#123;</span><br><span class="line"> var a = x+y+z；   //需要传入3个参数x，y，z</span><br><span class="line">console.log(argments);  //argments为接收的不定参数</span><br><span class="line">console.log(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><ul><li><p>setTimeout：设置定时器</p></li><li><p>clearTimeout：清除定时器</p></li><li><p>setInterval：设置定时器</p></li><li><p>clearInterval：清除定时器</p></li></ul><p>注：清除定时器的时候，要给定时器加个名字</p><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var btn = document.getElementsByTagName(&quot;button&quot;)[0];</span><br><span class="line">    //1000毫秒=1秒</span><br><span class="line"></span><br><span class="line">setTimeout(function () &#123;</span><br><span class="line"></span><br><span class="line">        console.log(123)</span><br><span class="line"></span><br><span class="line">    &#125;,1000);</span><br><span class="line"></span><br><span class="line">var timer = setInterval(function () &#123;</span><br><span class="line">    console.log(123)</span><br><span class="line">&#125;,1000);</span><br><span class="line"></span><br><span class="line">btn.onclick = function () &#123;</span><br><span class="line">    clearInterval(timer);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="setTimeout与setInterval的区别"><a href="#setTimeout与setInterval的区别" class="headerlink" title="setTimeout与setInterval的区别"></a>setTimeout与setInterval的区别</h2><p> setTimeout执行一次，setInterval一直循环执行，直到清除定时器</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Math方法&quot;&gt;&lt;a href=&quot;#Math方法&quot; class=&quot;headerlink&quot; title=&quot;Math方法&quot;&gt;&lt;/a&gt;Math方法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;sqrt：开方&lt;/li&gt;
&lt;li&gt;abs：绝对值&lt;/li&gt;
&lt;li&gt;PI：π&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="web" scheme="https://lesama.github.io/categories/web/"/>
    
    
      <category term="js" scheme="https://lesama.github.io/tags/js/"/>
    
      <category term="JavaScript" scheme="https://lesama.github.io/tags/JavaScript/"/>
    
      <category term="web" scheme="https://lesama.github.io/tags/web/"/>
    
      <category term="网页" scheme="https://lesama.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-02</title>
    <link href="https://lesama.github.io/JavaScript-02.html"/>
    <id>https://lesama.github.io/JavaScript-02.html</id>
    <published>2019-02-08T16:06:35.000Z</published>
    <updated>2019-03-04T10:39:48.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript操作符"><a href="#JavaScript操作符" class="headerlink" title="JavaScript操作符"></a>JavaScript操作符</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ol><li><p>关系运算符  &gt; &lt; &gt;= &lt;= != == === !==</p><p>​            ==:比较数据  不比较类型</p><p>​            ===：比数据比类型</p><p> . 逻辑运算符  &amp;&amp;逻辑与  || 逻辑或  ！逻辑非    </p></li><li><p>算术运算符  + － <em>  /  %  ++  －－ +=  </em>=  /=</p></li><li><p>赋值运算符  =</p></li><li><p>条件运算符  （三目运算符 三元运算符）？：</p><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p><strong>typeof</strong><br>判断变量的数据类型  两种写法<br> typeof 变量名<br> typeof （变量名）</p><p> number      —如果这个字值是数值<br> string         —如果这个字值是字符串<br> undefined  —如果这个字值是未定义<br> boolean     —如果这个字值是布尔值<br> object    —如果这个字值是对象或null<br> function     —如果这个字值是函数</p></li></ol><h1 id="JavaScript控制流程语句"><a href="#JavaScript控制流程语句" class="headerlink" title="JavaScript控制流程语句"></a>JavaScript控制流程语句</h1><ul><li><p>选择结构</p><p>​        if…else</p><p>​        switch…case(可以使用字符串)</p></li><li><p>循环结构</p><p>​        for</p><p>​        do…while</p><p>​        while</p><p>​        for  in   for(var i in 数组名) i 代表数组下标，只能放在数组中</p></li><li><p>跳转语句</p><p>​        break</p><p>​        continue</p></li></ul><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><h2 id="字符串的常用方法"><a href="#字符串的常用方法" class="headerlink" title="字符串的常用方法"></a>字符串的常用方法</h2><ul><li><p>lenght; 长度</p></li><li><p>[]/get（）;下标</p></li><li><p>Replace（）;替换</p></li><li><p>Split（）; 分割</p></li><li><p>Slice（）;切割</p></li><li><p>Substring（）;截取</p></li><li><p>toUpperCase（）;转大写</p></li><li><p>toLowerCase（）;转小写</p></li><li><p>isnan（）;—判断是否为数值类型  —true  不是数值   —false  是数值</p></li><li><p>parseint（）; 转数值类型</p></li><li><p>parsefloat（）; 转小数类型</p></li><li><p>字符串函数</p><p>​    indexof（””）</p><p>​    字符串.indexof（”a”）; —返回a字符 在字符串中的下标 从0开始，如果未找到返回-1</p></li></ul><h2 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h2><ul><li>length;长度</li><li>[];下标</li><li>push（）;右加</li><li>Unshift（）;左家</li><li>Pop（）;右删</li><li>Shift（）;左删</li><li>Concat（）;连接</li><li>Reverse（）;反向</li><li>Sort（）;排序</li><li>join（）;拼接</li><li>splice（）;替换</li><li>slice（）;切片</li><li>indexOf（）;索引</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript操作符&quot;&gt;&lt;a href=&quot;#JavaScript操作符&quot; class=&quot;headerlink&quot; title=&quot;JavaScript操作符&quot;&gt;&lt;/a&gt;JavaScript操作符&lt;/h1&gt;&lt;h2 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; c
      
    
    </summary>
    
      <category term="web" scheme="https://lesama.github.io/categories/web/"/>
    
    
      <category term="js" scheme="https://lesama.github.io/tags/js/"/>
    
      <category term="JavaScript" scheme="https://lesama.github.io/tags/JavaScript/"/>
    
      <category term="web" scheme="https://lesama.github.io/tags/web/"/>
    
      <category term="网页" scheme="https://lesama.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-01</title>
    <link href="https://lesama.github.io/JavaScript-01.html"/>
    <id>https://lesama.github.io/JavaScript-01.html</id>
    <published>2019-01-22T01:30:04.000Z</published>
    <updated>2019-02-17T02:53:47.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><ul><li><p>javaScript简称 —- js</p></li><li><p>网页三剑客：</p><p>​    html、css、js</p></li><li><p>JavaScript简介：</p><pre><code>  1995年由 netspace和sun合作制作</code></pre><p>  一种基于对象（object）和事件驱动并具有相对安全性的客户端脚本语言</p></li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>是一种可以和html标记语言混合使用的脚本语言，不能单独运行</li><li>ECMA（欧洲计算机商协会）的标准，支持大部分浏览器</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>严格区分大小写</li><li>每一行完整的语句后都要加分号</li><li>变量名不能使用关键字</li><li>代码要注意缩进，保持代码可读性</li></ol><h1 id="2-如何使用JavaScript"><a href="#2-如何使用JavaScript" class="headerlink" title="2. 如何使用JavaScript"></a>2. 如何使用JavaScript</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">1.嵌套 一般放在head中</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">//代码</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2.引用外部js文件</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js文件地址"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">3.行级</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"javascript:alert('123')"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">```</span><br></pre></td></tr></table></figure><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><ul><li>getElementById id-通过ID获取元素</li><li>getElementsByClassName class-通过class名字获取</li><li>getElementsByTagName tagName-通过标签名获取元素</li><li>getElementsByName name-通过属性名获取元素，一般用于input</li><li>selector-通过CSS选择器获取一个</li><li>selectorAll-通过CSS选择器获取所有</li></ul><h2 id="简单事件"><a href="#简单事件" class="headerlink" title="简单事件"></a>简单事件</h2><p><strong>鼠标事件：</strong></p><ul><li>onclick —单击事件</li><li>ondbclick —双击事件</li><li>onmouseenter —鼠标划入</li><li>onmouseleave —鼠标划出</li><li>onresize —窗口变化</li><li>onchange —改变下拉框</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型（6种 5种简单数据类型，一种复杂数据类型）弱类型<br><strong>弱类型</strong></p><ol><li>number      数值型 不区分整数和浮点数，没有限制长度</li><li>string      字符串</li><li>undefined   未定义  专门用来确定一个变量是否有初始值<br> . null          空      用于表明某个变量的值为空</li><li>boolean     布尔型</li><li>还有一种复杂性数据类型  object  对象</li></ol><h2 id="属性操作-合法属性及自定义属性-增删改查"><a href="#属性操作-合法属性及自定义属性-增删改查" class="headerlink" title="属性操作 - 合法属性及自定义属性(增删改查)"></a>属性操作 - 合法属性及自定义属性(增删改查)</h2><ul><li>变量名.classname=’box’; 增（无则增有则改）</li><li>console.log(变量名.className); 查</li><li>变量名.reremoveAttribute(‘属性名’) 删</li><li>classname/removeAttribute</li><li>setAttribute 增加效果（无则增有则改）</li><li>hasAttritube 查找</li><li>removeAttribute 删除效果</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;javaScript简称 —- js&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网页三剑客：&lt;/p&gt;
&lt;p&gt;​
      
    
    </summary>
    
      <category term="web" scheme="https://lesama.github.io/categories/web/"/>
    
    
      <category term="js" scheme="https://lesama.github.io/tags/js/"/>
    
      <category term="JavaScript" scheme="https://lesama.github.io/tags/JavaScript/"/>
    
      <category term="web" scheme="https://lesama.github.io/tags/web/"/>
    
      <category term="网页" scheme="https://lesama.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>CSS进阶</title>
    <link href="https://lesama.github.io/css-02.html"/>
    <id>https://lesama.github.io/css-02.html</id>
    <published>2019-01-19T06:25:00.000Z</published>
    <updated>2019-02-17T02:53:08.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-盒子模型"><a href="#1-盒子模型" class="headerlink" title="1. 盒子模型"></a>1. 盒子模型</h1><pre><code>可以把页面上的元素看成一个盒子盒子模型由内容、内边距、边框、外边距构成padding - 内边距margin - 外边距 ☆border - 边框content(width、height) - 内容border-top: 上边框border-right: 右边框border-left: 左边框border-bottom: 下边框 double 双线dotted 点dashed 虚线solid 实线padding、margin - 参数 上右下左 顺时针px 像素</code></pre><h1 id="2-Reset-重置"><a href="#2-Reset-重置" class="headerlink" title="2. Reset 重置"></a>2. Reset 重置</h1><pre><code>Reset - 重置CSS    浏览器解析标签的时候本身自带一些样式，有时会导致我们自身写的样式出现的效果不一致    每个公司会根据自己的业务需求写一套属于自己的ResetCss    以下是一个通用的RESETCSS：        https://meyerweb.com/eric/tools/css/reset/</code></pre><h1 id="3-浮动"><a href="#3-浮动" class="headerlink" title="3. 浮动"></a>3. 浮动</h1><pre><code>float:left 向左浮动float:right 向右浮动使用浮动须知：    - 要先改成内联块状    - 脱离文档流    - 可能会造成高度塌陷三种解决方法：    1、overflow:hidden;不推荐只适用于纯浮动的页面布局    2、加一个空的&lt;div&gt;&lt;/div&gt;;也不推荐    3、.clearfix::{            display:block;            clear:both;            content:&#39;&#39;; 空字符        } 推荐 比较常用</code></pre><h1 id="4-定位"><a href="#4-定位" class="headerlink" title="4. 定位"></a>4. 定位</h1><pre><code>作用：对元素进行精确的定位三种形式    1、绝对定位:position:absolute;        绝对定位是脱离文档流的    2、相对定位:posttion:relative;    3、固定定位:position:fixed;        固定定位与相对定位不脱离文档流，是相对于自己的一个偏移父相（对）子绝（对）：保持页面的布局完整 </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-盒子模型&quot;&gt;&lt;a href=&quot;#1-盒子模型&quot; class=&quot;headerlink&quot; title=&quot;1. 盒子模型&quot;&gt;&lt;/a&gt;1. 盒子模型&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;可以把页面上的元素看成一个盒子
盒子模型由内容、内边距、边框、外边距构成
padding
      
    
    </summary>
    
      <category term="web" scheme="https://lesama.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://lesama.github.io/tags/web/"/>
    
      <category term="网页" scheme="https://lesama.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
      <category term="html" scheme="https://lesama.github.io/tags/html/"/>
    
      <category term="css" scheme="https://lesama.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS基础</title>
    <link href="https://lesama.github.io/css-01.html"/>
    <id>https://lesama.github.io/css-01.html</id>
    <published>2019-01-18T01:34:36.000Z</published>
    <updated>2019-02-17T02:52:33.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-CSS的基本使用"><a href="#1-CSS的基本使用" class="headerlink" title="1. CSS的基本使用"></a>1. CSS的基本使用</h1><h2 id="行内样式："><a href="#行内样式：" class="headerlink" title="行内样式："></a>行内样式：</h2><p>行内样式可直接写在现有的HTML标签里,比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:red;font-size:12px;"</span>&gt;</span>233333333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h2><p>内部样式把CSS样式直接写在当前页面的头部标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"tsxt/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">样式规则：选择器&#123;属性：属性值&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h2><p>外部样式是把CSS样式写在外部CSS文件中，通过<link>嵌在页面的头部标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"要引入的网址"</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2. 选择器"></a>2. 选择器</h1><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><pre><code>标签选择器 标签名类选择器   .ID选择器   #</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre><code>后代 .div span子代 .div&gt;span兄弟 .div~span 向下执行相同的相邻 .div+span 全选择器 *div,span{ }  可以节省重复代码伪类选择器 link 未访问的           visited 访问后的           hover 划过           active 激活状态的</code></pre><h1 id="3-字体-font属性"><a href="#3-字体-font属性" class="headerlink" title="3. 字体 font属性"></a>3. 字体 font属性</h1><h2 id="常见的文本样式："><a href="#常见的文本样式：" class="headerlink" title="常见的文本样式："></a>常见的文本样式：</h2><pre><code>color：字体颜色font-size：字体大小font-family：字体类型&lt;strong&gt;：字体加粗font-weight：bold  字体加粗&lt;em&gt; 斜体font-style：italic斜体   normal（正常）div--层标签text-decoration：underline(有下划线) none(无下划线)设置下划线             line-through:删除线text-align：center  文本居中对齐方式   left：对左   right：对右line-height：行间距letter-spacing:字符间距border-radius:  pxtext-indent: 2em首行缩进Div+css布局方式height+line-height文字上下居中test-align：center文字水平居中</code></pre><h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><pre><code>background-color:背景颜色background-image:url(图片路径);background-repeat:no-repeat;图片不重复background-repeat:repeat-x(向x轴延伸)background-repeat:repeat-y(向y轴延伸)background-position:图片偏移;dispaly:inline;  转内联dispaly:block;  转块状dispaly:inline-block; 转内联块状</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-CSS的基本使用&quot;&gt;&lt;a href=&quot;#1-CSS的基本使用&quot; class=&quot;headerlink&quot; title=&quot;1. CSS的基本使用&quot;&gt;&lt;/a&gt;1. CSS的基本使用&lt;/h1&gt;&lt;h2 id=&quot;行内样式：&quot;&gt;&lt;a href=&quot;#行内样式：&quot; class=&quot;
      
    
    </summary>
    
      <category term="web" scheme="https://lesama.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://lesama.github.io/tags/web/"/>
    
      <category term="网页" scheme="https://lesama.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
      <category term="html" scheme="https://lesama.github.io/tags/html/"/>
    
      <category term="css" scheme="https://lesama.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>HTML介绍及常用标签</title>
    <link href="https://lesama.github.io/html.html"/>
    <id>https://lesama.github.io/html.html</id>
    <published>2019-01-17T09:39:19.000Z</published>
    <updated>2019-02-17T02:55:59.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-HTML简介"><a href="#1-HTML简介" class="headerlink" title="1. HTML简介"></a>1. HTML简介</h1><h2 id="超文本标记语言"><a href="#超文本标记语言" class="headerlink" title="超文本标记语言"></a>超文本标记语言</h2><p>Hyper(超)Text(文本)MarKup(标记)Language(语言)</p><p>HTML是一门标记语言，标记语言就是靠标签组成，学习HTML就是学习标签的使用</p><p>HTML代码在执行过程中是从上往下执行的</p><h2 id="什么是标签"><a href="#什么是标签" class="headerlink" title="什么是标签"></a>什么是标签</h2><ol><li>由尖括号包裹单词构成，所以标签不可能以数字开头</li><li>不区分大小写，推荐小写</li><li>标签可以嵌套，不能交叉嵌套</li></ol><h1 id="2-常用标签"><a href="#2-常用标签" class="headerlink" title="2. 常用标签"></a>2. 常用标签</h1><h2 id="初始标签"><a href="#初始标签" class="headerlink" title="初始标签"></a>初始标签</h2><ol><li><p>title:标题标签</p></li><li><p>head:头部标签</p></li><li><p>​body:主体标签</p></li></ol><h2 id="常见标签"><a href="#常见标签" class="headerlink" title="常见标签"></a>常见标签</h2><ul><li>h1-h6:文章标题</li><li>p:段落标签</li><li>span:用来组合文档中的行内元素</li><li>strong/b:加粗</li><li>i:斜体</li><li>s:删除线</li></ul><h2 id="块状标签和内联标签-行内标签"><a href="#块状标签和内联标签-行内标签" class="headerlink" title="块状标签和内联标签(行内标签)"></a>块状标签和内联标签(行内标签)</h2><ul><li><p>块状：霸道 独占一行，前后自动换</p></li><li><p>行，可以设置宽高</p></li><li><p>内联(行内)：在一行直到满了为止换行</p></li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><p>有序列表：ol li</p></li><li><p>无序列表：ul li</p></li><li><p>定义列表：dl dt dd</p></li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>src = 图片</p><p>../ 相对路径</p><p>直接从电脑的是绝对路径</p><h2 id="超链接-a标签"><a href="#超链接-a标签" class="headerlink" title="超链接(a标签)"></a>超链接(a标签)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">" "</span> <span class="attr">target</span>=<span class="string">" "</span> <span class="attr">title</span>=<span class="string">" "</span> &gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>href = 跳转的路径</li><li>target 打开方式，默认 self 在本身打开，blank 在新的空白页面打开</li><li>title 鼠标下方提示文本</li></ul><h2 id="特殊标签"><a href="#特殊标签" class="headerlink" title="特殊标签"></a>特殊标签</h2><ul><li>&amp;nbsp 空格</li><li>&amp;lt 小于</li><li>&amp;gt 大于</li><li>&amp;emsp 字符宽</li></ul><h2 id="表格-table"><a href="#表格-table" class="headerlink" title="表格(table)"></a>表格(table)</h2><ul><li>table:表格标签</li><li>thead:表格头部</li><li>tbody:表格主题</li><li>tfoot:表格脚部</li><li>tr:行</li><li>td:列</li><li>colspan:合并列</li><li>rowspan:合并行</li></ul><h2 id="表单-from"><a href="#表单-from" class="headerlink" title="表单(from)"></a>表单(from)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span> <span class="attr">action</span>=<span class="string">" "</span> <span class="attr">method</span>=<span class="string">" "</span> &gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>action:提交到的路径</p></li><li><p>method:提交的方式</p><p>​    默认值是 get  ，会在地址栏显示安全性较差，对于提交的内容有长度限制</p><p>​    post 不会显示在地址栏相对安全，对于提交的内容没有长度限制</p></li></ul><h2 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h2><ul><li><p>文 本 框:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">maxlength</span>=<span class="string">"可输入的最大长度"</span> <span class="attr">size</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>提交按钮:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>普通按钮:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"普通按钮"</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>密 码 框:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>重置按钮:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置"</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>单选按钮:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> /&gt;</span>name必须设置成一样的,表示是一组单选按钮 checked="checked"默认选中</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>文件上传域:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>多选按钮:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span>name可以设置成不一样的,要求设置成一样的</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>下 拉 框:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>多行文本域:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>  <span class="attr">rows</span>=<span class="string">"行"</span> <span class="attr">cols</span>=<span class="string">"列"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>隐 藏 域:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>图片按钮:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">src</span>= <span class="string">""</span> <span class="attr">onmouseover</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3. 扩展"></a>3. 扩展</h1><p>在输入框中输入要搜索的信息，点击”百度一下“则跳转到百度对应的搜索信息，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https://www.baidu.com/s"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">百度搜索 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入搜索内容"</span> <span class="attr">name</span>=<span class="string">'wd'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">tpye</span>=<span class="string">'submit'</span> <span class="attr">name</span>=<span class="string">'百度一下'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-HTML简介&quot;&gt;&lt;a href=&quot;#1-HTML简介&quot; class=&quot;headerlink&quot; title=&quot;1. HTML简介&quot;&gt;&lt;/a&gt;1. HTML简介&lt;/h1&gt;&lt;h2 id=&quot;超文本标记语言&quot;&gt;&lt;a href=&quot;#超文本标记语言&quot; class=&quot;head
      
    
    </summary>
    
      <category term="web" scheme="https://lesama.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://lesama.github.io/tags/web/"/>
    
      <category term="网页" scheme="https://lesama.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
      <category term="html" scheme="https://lesama.github.io/tags/html/"/>
    
  </entry>
  
</feed>
