{"meta":{"title":"嘿!楽","subtitle":"楽的个人博客","description":"这是一个与人工智能相关的网站","author":"lesama","url":"https://lesama.github.io"},"pages":[{"title":"关于我","date":"2018-12-31T16:00:01.000Z","updated":"2019-01-23T17:17:59.531Z","comments":true,"path":"about/index.html","permalink":"https://lesama.github.io/about/index.html","excerpt":"","text":"关于我一个喜欢研究一些新技术的奇怪人。 平时喜欢写写文章，看看书，逛逛技术论坛，折腾新东西。 了解前端、python、MachineLearning、DeepLearning。 博客内容 python 前端 爬虫 机器学习 深度学习 强化学习 相关项目 相关工具"}],"posts":[{"title":"JavaScript-03","slug":"JavaScript-03","date":"2019-02-11T13:46:30.000Z","updated":"2019-02-11T14:01:26.934Z","comments":false,"path":"JavaScript-03.html","link":"","permalink":"https://lesama.github.io/JavaScript-03.html","excerpt":"","text":"Math方法 sqrt：开方 abs：绝对值 PI：π pow(x,y) ：x的y次方 round：取整（四舍五入） random：随机数0~1 min（x，y，z）：从x，y，z中取最小值 max（x，y，z）：从x，y，z中取最大值 ceil：向上取整 floor：向下取整 例： 1Math.round(Math.random*100) //随机生成1~100的随机数 日期对象Date方法new Date()：新建日期对象 getFullYear：获取年份 getMonth：获取月份 getDay：获取日 getHours：获取时 getMinutes：获取分 getSeconds：获取秒 例： 12345678var today = new Date();var year = today.getFullYear();var month = today.getMonth()+1;var day = today.getDay();var hour = today.getHours();var minute = today.getMinutes(); var second = today.getSeconds();console.log(year+&apos;年&apos;+month+&apos;月&apos;+day+&apos;日&apos;+hour+&apos;:&apos;+minute+&apos;:&apos;+second); 时间戳时间戳：格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。 123var timestamp = Date.new();//新建console.log(&quot;timestamp:&quot;timestamp); 函数函数的定义函数是通常是把一系列重复使用的操作封装成一个方法，方便调用 函数分类：有名函数，匿名函数 定义有名函数:1234function 函数名()&#123; //代码块 console.log(&quot;OK&quot;)&#125; 自定义函数： 123var result=function 函数名()&#123; //代码块&#125; 调用函数1函数名(); 匿名函数：​ 匿名函数一般充当事件函数 例： 1234567var box = document.getElementById(&apos;box&apos;);box.onclick = function()&#123; console.log(123);&#125;; 自调用函数：自调用函数是在函数表达式写完后自动执行 其函数表达式前面加上 (,),+,-,!,~ 例： 1234567(function()&#123; console.log(&quot;ok&quot;);&#125;)();+function()&#123; console.log(&quot;ok&quot;);&#125;(); 函数参数：function sum(){ var a = x+y+z； //需要传入3个参数x，y，z console.log(argments); //argments为接收的不定参数 console.log(a) } 定时器 setTimeout：设置定时器 clearTimeout：清除定时器 setInterval：设置定时器 clearInterval：清除定时器 注：清除定时器的时候，要给定时器加个名字 例： 12345678910111213141516var btn = document.getElementsByTagName(&quot;button&quot;)[0]; //1000毫秒=1秒setTimeout(function () &#123; console.log(123) &#125;,1000);var timer = setInterval(function () &#123; console.log(123)&#125;,1000);btn.onclick = function () &#123; clearInterval(timer);&#125;; setTimeout与setInterval的区别 setTimeout执行一次，setInterval一直循环执行，直到清除定时器","categories":[{"name":"web","slug":"web","permalink":"https://lesama.github.io/categories/web/"}],"tags":[{"name":"js","slug":"js","permalink":"https://lesama.github.io/tags/js/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://lesama.github.io/tags/JavaScript/"},{"name":"web","slug":"web","permalink":"https://lesama.github.io/tags/web/"},{"name":"网页","slug":"网页","permalink":"https://lesama.github.io/tags/网页/"}],"keywords":[{"name":"web","slug":"web","permalink":"https://lesama.github.io/categories/web/"}]},{"title":"JavaScript-02","slug":"JavaScript-02","date":"2019-02-08T16:06:35.000Z","updated":"2019-02-09T00:33:41.728Z","comments":false,"path":"JavaScript-02.html","link":"","permalink":"https://lesama.github.io/JavaScript-02.html","excerpt":"","text":"avaScript操作符运算符 关系运算符 &gt; &lt; &gt;= &lt;= != == === !== ​ ==:比较数据 不比较类型 ​ ===：比数据比类型 . 逻辑运算符 &amp;&amp;逻辑与 || 逻辑或 ！逻辑非 算术运算符 + － / % ++ －－ += = /= 赋值运算符 = 条件运算符 （三目运算符 三元运算符）？： 操作符typeof判断变量的数据类型 两种写法 typeof 变量名 typeof （变量名） number –如果这个字值是数值 string –如果这个字值是字符串 undefined –如果这个字值是未定义 boolean –如果这个字值是布尔值 object –如果这个字值是对象或null function –如果这个字值是函数 JavaScript控制流程语句 选择结构 ​ if…else ​ switch…case(可以使用字符串) 循环结构 ​ for ​ do…while ​ while ​ for in for(var i in 数组名) i 代表数组下标，只能放在数组中 跳转语句 ​ break ​ continue 常用方法字符串的常用方法 lenght; 长度 []/cjarAt（）;下标 Replace（）;替换 Split（）; 分割 Slice（）;切割 Substring（）;截取 toUpperCase（）;转大写 toLowerCase（）;转小写 isnan（）;–判断是否为数值类型 –true 不是数值 –false 是数值 parseint（）; 转数值类型 parsefloat（）; 转小数类型 字符串函数 ​ indexof（””） ​ 字符串.indexof（”a”）; –返回a字符 在字符串中的下标 从0开始，如果未找到返回-1 数组的常用方法 length;长度 [];下标 push（）;右加 Unshift（）;左家 Pop（）;右删 Shift（）;左删 Concat（）;连接 Reverse（）;反向 Sort（）;排序 join（）;拼接 splice（）;替换 slice（）;切片 indexOf（）;索引","categories":[{"name":"web","slug":"web","permalink":"https://lesama.github.io/categories/web/"}],"tags":[],"keywords":[{"name":"web","slug":"web","permalink":"https://lesama.github.io/categories/web/"}]},{"title":"JavaScript-01","slug":"JavaScript-01","date":"2019-01-22T01:30:04.000Z","updated":"2019-02-09T01:26:26.602Z","comments":false,"path":"JavaScript-01.html","link":"","permalink":"https://lesama.github.io/JavaScript-01.html","excerpt":"","text":"1. 简介 javaScript简称 — js 网页三剑客： ​ html、css、js JavaScript简介： 1995年由 netspace和sun合作制作 一种基于对象（object）和事件驱动并具有相对安全性的客户端脚本语言 特点 是一种可以和html标记语言混合使用的脚本语言，不能单独运行 ECMA（欧洲计算机商协会）的标准，支持大部分浏览器 注意事项 严格区分大小写 每一行完整的语句后都要加分号 变量名不能使用关键字 代码要注意缩进，保持代码可读性 2. 如何使用JavaScript1234567891011121314151617181920212223242526272829&lt;html&gt;``` &lt;head&gt;&lt;/head&gt; &lt;body&gt;&lt;/body&gt;```&lt;/html&gt;```1.嵌套 一般放在head中&lt;script type=\"text/javascript\"&gt; //代码&lt;/script&gt;2.引用外部js文件&lt;script type=\"text/javascript\" src=\"js文件地址\"&gt;&lt;/script&gt;3.行级&lt;button onclick=\"javascript:alert('123')\"&gt;按钮&lt;/button&gt;``` 获取元素 getElementById id-通过ID获取元素 getElementsByClassName class-通过class名字获取 getElementsByTagName tagName-通过标签名获取元素 getElementsByName name-通过属性名获取元素，一般用于input selector-通过CSS选择器获取一个 selectorAll-通过CSS选择器获取所有 简单事件鼠标事件： onclick –单击事件 ondbclick –双击事件 onmouseenter –鼠标划入 onmouseleave –鼠标划出 onresize –窗口变化 onchange –改变下拉框 数据类型数据类型（6种 5种简单数据类型，一种复杂数据类型）弱类型弱类型 number 数值型 不区分整数和浮点数，没有限制长度 string 字符串 undefined 未定义 专门用来确定一个变量是否有初始值 . null 空 用于表明某个变量的值为空 boolean 布尔型 还有一种复杂性数据类型 object 对象 属性操作 - 合法属性及自定义属性(增删改查) 变量名.classname=’box’; 增（无则增有则改） console.log(变量名.className); 查 变量名.reremoveAttribute(‘属性名’) 删 classname/removeAttribute setAttribute 增加效果（无则增有则改） hasAttritube 查找 removeAttribute 删除效果","categories":[{"name":"web","slug":"web","permalink":"https://lesama.github.io/categories/web/"}],"tags":[{"name":"js","slug":"js","permalink":"https://lesama.github.io/tags/js/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://lesama.github.io/tags/JavaScript/"},{"name":"web","slug":"web","permalink":"https://lesama.github.io/tags/web/"},{"name":"网页","slug":"网页","permalink":"https://lesama.github.io/tags/网页/"}],"keywords":[{"name":"web","slug":"web","permalink":"https://lesama.github.io/categories/web/"}]},{"title":"CSS进阶","slug":"css-02","date":"2019-01-19T06:25:00.000Z","updated":"2019-01-23T15:20:42.142Z","comments":false,"path":"css-02.html","link":"","permalink":"https://lesama.github.io/css-02.html","excerpt":"","text":"1. 盒子模型可以把页面上的元素看成一个盒子 盒子模型由内容、内边距、边框、外边距构成 padding - 内边距 margin - 外边距 ☆ border - 边框 content(width、height) - 内容 border-top: 上边框 border-right: 右边框 border-left: 左边框 border-bottom: 下边框 double 双线 dotted 点 dashed 虚线 solid 实线 padding、margin - 参数 上右下左 顺时针 px 像素 2. Reset 重置Reset - 重置CSS 浏览器解析标签的时候本身自带一些样式，有时会导致我们自身写的样式出现的效果不一致 每个公司会根据自己的业务需求写一套属于自己的ResetCss 以下是一个通用的RESETCSS： https://meyerweb.com/eric/tools/css/reset/ 3. 浮动float:left 向左浮动 float:right 向右浮动 使用浮动须知： - 要先改成内联块状 - 脱离文档流 - 可能会造成高度塌陷 三种解决方法： 1、overflow:hidden;不推荐只适用于纯浮动的页面布局 2、加一个空的&lt;div&gt;&lt;/div&gt;;也不推荐 3、.clearfix::{ display:block; clear:both; content:&apos;&apos;; 空字符 } 推荐 比较常用 4. 定位作用：对元素进行精确的定位 三种形式 1、绝对定位:position:absolute; 绝对定位是脱离文档流的 2、相对定位:posttion:relative; 3、固定定位:position:fixed; 固定定位与相对定位不脱离文档流，是相对于自己的一个偏移 父相（对）子绝（对）：保持页面的布局完整","categories":[{"name":"web","slug":"web","permalink":"https://lesama.github.io/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"https://lesama.github.io/tags/web/"},{"name":"网页","slug":"网页","permalink":"https://lesama.github.io/tags/网页/"},{"name":"css","slug":"css","permalink":"https://lesama.github.io/tags/css/"},{"name":"html","slug":"html","permalink":"https://lesama.github.io/tags/html/"}],"keywords":[{"name":"web","slug":"web","permalink":"https://lesama.github.io/categories/web/"}]},{"title":"CSS基础","slug":"css-01","date":"2019-01-18T01:34:36.000Z","updated":"2019-01-23T15:20:29.373Z","comments":false,"path":"css-01.html","link":"","permalink":"https://lesama.github.io/css-01.html","excerpt":"","text":"1. CSS的基本使用行内样式：行内样式可直接写在现有的HTML标签里,比如： 123&lt;p style=\"color:red;font-size:12px;\"&gt;233333333&lt;/p&gt; 内部样式内部样式把CSS样式直接写在当前页面的头部标签中 12345&lt;style type=\"tsxt/css\"&gt; 样式规则：选择器&#123;属性：属性值&#125;&lt;/style&gt; 外部样式外部样式是把CSS样式写在外部CSS文件中，通过嵌在页面的头部标签中 123&lt;link rel=\"stylesheet\" href=\"要引入的网址\"&gt; 2. 选择器基本标签选择器 标签名 类选择器 . ID选择器 # 其他后代 .div span 子代 .div&gt;span 兄弟 .div~span 向下执行相同的 相邻 .div+span 全选择器 * div,span{ } 可以节省重复代码 伪类选择器 link 未访问的 visited 访问后的 hover 划过 active 激活状态的 3. 字体 font属性常见的文本样式：color：字体颜色 font-size：字体大小 font-family：字体类型 &lt;strong&gt;：字体加粗 font-weight：bold 字体加粗 &lt;em&gt; 斜体 font-style：italic斜体 normal（正常） div--层标签 text-decoration：underline(有下划线) none(无下划线)设置下划线 line-through:删除线 text-align：center 文本居中对齐方式 left：对左 right：对右 line-height：行间距 letter-spacing:字符间距 border-radius: px text-indent: 2em首行缩进 Div+css布局方式 height+line-height文字上下居中 test-align：center文字水平居中 背景属性background-color:背景颜色 background-image:url(图片路径); background-repeat:no-repeat;图片不重复 background-repeat:repeat-x(向x轴延伸) background-repeat:repeat-y(向y轴延伸) background-position:图片偏移; dispaly:inline; 转内联 dispaly:block; 转块状 dispaly:inline-block; 转内联块状","categories":[{"name":"web","slug":"web","permalink":"https://lesama.github.io/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"https://lesama.github.io/tags/web/"},{"name":"网页","slug":"网页","permalink":"https://lesama.github.io/tags/网页/"},{"name":"css","slug":"css","permalink":"https://lesama.github.io/tags/css/"},{"name":"html","slug":"html","permalink":"https://lesama.github.io/tags/html/"}],"keywords":[{"name":"web","slug":"web","permalink":"https://lesama.github.io/categories/web/"}]},{"title":"HTML介绍及常用标签","slug":"html","date":"2019-01-17T09:39:19.000Z","updated":"2019-01-23T15:21:06.400Z","comments":true,"path":"html.html","link":"","permalink":"https://lesama.github.io/html.html","excerpt":"","text":"1. HTML简介超文本标记语言Hyper(超)Text(文本)MarKup(标记)Language(语言) HTML是一门标记语言，标记语言就是靠标签组成，学习HTML就是学习标签的使用 HTML代码在执行过程中是从上往下执行的 什么是标签 由尖括号包裹单词构成，所以标签不可能以数字开头 不区分大小写，推荐小写 标签可以嵌套，不能交叉嵌套 2. 常用标签初始标签 title:标题标签 head:头部标签 ​body:主体标签 常见标签 h1-h6:文章标题 p:段落标签 span:用来组合文档中的行内元素 strong/b:加粗 i:斜体 s:删除线 块状标签和内联标签(行内标签) 块状：霸道 独占一行，前后自动换 行，可以设置宽高 内联(行内)：在一行直到满了为止换行 列表 有序列表：ol li 无序列表：ul li 定义列表：dl dt dd 图片src = 图片 ../ 相对路径 直接从电脑的是绝对路径 超链接(a标签)123&lt;a href=\" \" target=\" \" title=\" \" &gt; href = 跳转的路径 target 打开方式，默认 self 在本身打开，blank 在新的空白页面打开 title 鼠标下方提示文本 特殊标签 &amp;nbsp 空格 &amp;lt 小于 &amp;gt 大于 &amp;emsp 字符宽 表格(table) table:表格标签 thead:表格头部 tbody:表格主题 tfoot:表格脚部 tr:行 td:列 colspan:合并列 rowspan:合并行 表单(from)123&lt;from action=\" \" method=\" \" &gt; action:提交到的路径 method:提交的方式 ​ 默认值是 get ，会在地址栏显示安全性较差，对于提交的内容有长度限制 ​ post 不会显示在地址栏相对安全，对于提交的内容没有长度限制 input标签 文 本 框: 123&lt;input type=\"text\" value=\"\" maxlength=\"可输入的最大长度\" size=\"\" /&gt; 提交按钮: 123&lt;input type=\"submit\" value=\"提交\" /&gt; 普通按钮: 123&lt;input type=\"button\" value=\"普通按钮\" /&gt; 密 码 框: 123&lt;input type=\"password\" /&gt; 重置按钮: 123&lt;input type=\"reset\" value=\"重置\" /&gt; 单选按钮: 123&lt;input type=\"radio\" /&gt;name必须设置成一样的,表示是一组单选按钮 checked=\"checked\"默认选中 文件上传域: 123&lt;input type=\"file\"/&gt; 多选按钮: 123&lt;input type=\"checkbox\" /&gt;name可以设置成不一样的,要求设置成一样的 下 拉 框: 123&lt;select&gt;&lt;option&gt;&lt;/option&gt;&lt;/select&gt; 多行文本域: 123&lt;textarea rows=\"行\" cols=\"列\"&gt;&lt;/textarea&gt; 隐 藏 域: 123&lt;input type=\"hidden\" /&gt; 图片按钮: 123&lt;input type=\"image\" src= \"\" onmouseover/&gt; 3. 扩展在输入框中输入要搜索的信息，点击”百度一下“则跳转到百度对应的搜索信息，代码如下： 123456&lt;form action=\"https://www.baidu.com/s\" method=\"get\"&gt; 百度搜索 &lt;input type=\"text\" placeholder=\"请输入搜索内容\" name='wd'&gt; &lt;input tpye='submit' name='百度一下'&gt;&lt;/form&gt;","categories":[{"name":"web","slug":"web","permalink":"https://lesama.github.io/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"https://lesama.github.io/tags/web/"},{"name":"网页","slug":"网页","permalink":"https://lesama.github.io/tags/网页/"},{"name":"html","slug":"html","permalink":"https://lesama.github.io/tags/html/"}],"keywords":[{"name":"web","slug":"web","permalink":"https://lesama.github.io/categories/web/"}]}]}